Battery & Power Control,  Commands,   NTV3,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   alive()                  //Periodically calling this function will reset the timer used to put the controller to sleep after long periods of keyboard inactivity.
Battery & Power Control,  Commands,   NTV3,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   powerOff()               //Immediately powers off the controller.
Battery & Power Control,  Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setPowerDownDelay(minutes)//OBSOLETE function. Sets the number of minutes used for the sleep timer.\n\n\rReplaced with the variable 'nPowerDownDelayMinutes'.
Battery & Power Control,  Commands,   E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setPowerDownTimer(minutesUntilSleep); //set Minutes to sleep [0..120min]
Battery & Power Control,  Commands,   E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getPowerDownTimer(); //Get Minutes to sleep [0..120min]
Battery & Power Control,  Commands,   E,				 feat_NaturalLanguageInActive,				noFeatRest,       F, A,   getBatteryVoltage(); //
Battery & Power Control,  Commands,   E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getBatteryCurrent();//Get battery current

Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bNoPowerDownOnACAdaptor  //Boolean variable. When true, and controller is connected to an AC adaptor, the sleep timer will be disabled.
Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bNxtRechargable          //Boolean variable. Indicates whether the NXT is currently using a rechargeable battery pack.
Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   externalBattery          //Instantaneous battery voltage (in millivolts) for external 12V battery used to power HiTechnic controllers.\n\n\rA value of -1 is returned if the external battery cannot be read. Only the HiTechnic Motor Controller has battery monitoring capabilities. The HiTechnic Servo Controller cannot monitor battery. So at least one Motor Controller is required for the battery monitoring capability.
Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   externalBatteryAvg       //Average battery voltage (in millivolts) for external 12V battery used to power HiTechnic controllers.\n\n\rA value of -1 is returned if the external battery cannot be read. Only the HiTechnic Motor Controller has battery monitoring capabilities. The HiTechnic Servo Controller cannot monitor battery. So at least one Motor Controller is required for the battery monitoring capability.\n\r
Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   LowVoltageBatteryCountLimits//The NXT will generate a "low voltage" pop up menu on its display when "N" consecutive battery voltage samples are at a low voltage. "N" is the "LowVoltageBatteryCountsLimits" variable.\n\n\rIf the value is zero then the pop up window is disabled.
Battery & Power Control,  Variables,  NTAR,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nAvgBatteryLevel         //The average battery level in millivolts. A value of 9458 represent 9.458 volts.\n\n\rIt's the average of 20 recent samples and smoothes out sudden voltage transients.
Battery & Power Control,  Variables,  ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBackupBatteryLevel      //FRC backup battery level (in millivolts; 9500 is 9.5 volts).
Battery & Power Control,  Variables,  ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBatteryLevel            //FRC main battery level (in millivolts; 9500 is 9.5 volts).
Battery & Power Control,  Variables,  NTAR,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nImmediateBatteryLevel   //The last sampled battery level in millivolts. A value of 9458 represent 9.458 volts.
Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nPowerDownDelayMinutes   //Specifies the number of minutes of inactivity (i.e. no buttons pressed) used by the sleep timer for automatic power off of controller.\n\n\rValues outside the range 0 to 255 are truncated to an unsigned byte value.\n\n\rValue 255 is special and indicates that the "value should not be updated". This allows the ROBOTC IDE to download a value to the firmware without actually causing an update.\n\n\rThe controller automatically powers off to conserve batteries. If you have a long running program, you may find that it will power off in the middle of operation. Calling the "alive()" function within your program will reset the power off timer to prevent this.
Battery & Power Control,  Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nPowerDownDelayMinutesDefault//
Battery & Power Control,  Variables,  R,         feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nShutdownVoltage          //Specifies the low voltage at which the RCX controller should automatically power off.
Battery & Power Control,  Variables,  V2,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nAvgBatteryLevel         //Returns the average voltage level of the main VEX battery.
Battery & Power Control,  Variables,  V2,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   BackupBatteryLevel       //Returns the current voltage level of the VEX backup battery.
Battery & Power Control,  Variables,  V2,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nImmediateBatteryLevel   //Returns the current voltage level of the main VEX battery.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btConnect(nPort, sFriendlyName)//Attempts to connect BT device with specified "sFriendlyName" on port 'nPort'. \n\n\rPort should be in the range 1 to 3.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btDisconnect(nPort)      //This function will disconnect a single existing Bluetooth connection on the NXT. 'nPort' ranges from 0 to 3.\n\n\rPort 0 is used if ths is a 'slave' Bluetooth device. Ports 1 to 3 are used when this is a 'master' Bluetooth device and are for the three possible slaves.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btDisconnectAll()        //This function disconnects all existing Bluetooth connections on the NXT.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btFactoryReset()         //This command will reset the NXT's bluetooth module to the default factory settings.\n\n\rAll existing connections are disconnected. The "My Contacts" list is emptied. Any existing paired connections are lost.\n\n\rThis command is used for restoring the NXT Bluetooth operation to its original condition. It's really only needed because its possible the Bluetooth hardware gets confused and in an inconsistent state and this is a method of "last resort" to recover.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   btGetMyContactsEntry(nIndexInList, nInfo)//
Bluetooth,                Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   BTOpcdFcn(function)      //Internal Macro
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btRemoveDevice(sFriendlyName)//Removes a device with the specified "sFriendlyName"  from the "My Contacts" list.\n\n\rRemoving a device will erase the "paired connection" for the device.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btRequestLinkQuality(nPort)//Requests the current BT link quality from a specific port. The function returns immediately before the link quality has been retrieved.\n\n\rThe NXT CPU will send a message to the Bluetooth module requesting the data. The data is then returned to the NXT CPU within a few 100 milliseconds.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btSearch()               //Begins a search for BT devices and adds new entries to the "My Contacts" lists.\n\n\rThe search can take up to 30 seconds to perform. 'btSearch' function returns immediately. Application code should continuously check the status to wait for the search to complete.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   btSendMessage(nPort, nXmitLength, nXmitBuffer, bWaitForReply)//Internal only.\n\n\r"Raw" send of a Fantom command over the BT link. The application program is responsible for the (complicated) proper formating of the message.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   btStopSearch()           //This function terminates an existing search on the NXT.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdBTCheckStatus(nStream)//Used to check the status of the BT.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdBTPurgeRcvBuffer()   //Used to purge data from the BT input buffer.\n\n\rNormally application program would not need to use this command.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdMessageAddToQueue(nQueueID, pData, nLength)//Adds the message at 'pData' to queue 'nQueueID'. 'nLength' is the length of the message.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdMessageGetSize(nQueueID)//Returns the size of the message at the head of queue 'nQueueID'. \n\n\rA non-zero value indicates that a message is available in the NXT's queue of received messages. A zero value indicates that the queue is empty.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdMessageRead(pData, nLengthToRead, nQueueID)//Reads a Bluetooth message from 'nQueueID'.\n\n\rThe message data is stored in the buffer at 'pData'. 'nLengthToRead' is the maximum number of bytes to read -- it is used to prevent overwriting beyond the length of the buffer at 'pData'.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdMessageWriteToBluetooth(nStream, pData, nLength, nQueueID)//Writes a Bluetooth message to 'nQueueID'. \n\n\rThe message will be written to the specified 'port' or 'nStream' which should be in the range of 0 to 3. This command is only useful when multiple ports are simultaneously open on the NXT; a configuration that is not recommended because of the much slower communications when multiple ports are in use.\n\n\rThe message data is taken from the buffer at 'pData'. 'nLength' is the number of bytes in the message; the maximum length is 58 bytes.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdMessageWriteToBluetooth(pData, nLength, nQueueID)//Writes a Bluetooth message to 'nQueueID'. \n\n\rThe message will be written to the currently open stream; the ROBOTC firmware will automatically determine the 'port' or 'stream' to use. This allows the same function call to be used at both slave (port is always 0) or master (port is one of 1 to 3) devices.\n\n\rThe message data is taken from the buffer at 'pData'. 'nLength' is the number of bytes in the message; the maximum length is 58 bytes.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdRawSendToBluetooth(nStream, pData, nLength)//Sends "raw bytes" out on  the indicated stream.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   cCmdRawSendToBluetooth(pData, nLength)//Sends "raw bytes" over the current bluettooth stream.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getBTAddress(btAddr)     //Retrieves the Bluetooth address of the NXT.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getDefaultPIN(passCode)  //Function retrieves the default BT passcode stored in flash.\n\n\rImmediately after firmware download, the default is set to "1234". ROBOTC has a function that will let you redefine the default port; either for a single power on session or on a permanent basis.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getDeviceAddr(nResult, nHandle, sAddr)//Gets the Device Address for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getDeviceClass(nHandle, sCOD)//Gets the Device Class for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getDeviceName(nHandle, sName)//Gets the Device Name for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getDeviceStatus(nHandle, nStatus)//Gets the Device Status for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getFirstDevice(nResult, nHandle)//Returns a 'handle' to the first device in the BT 'contacts' list.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getFriendlyName(sName)   //Copies the "friendly name" for a NXT to a string variable.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getNextDevice(nResult, nHandle)//Returns a 'handle' to the next device in the BT 'contacts' list.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getPortName(nResult, nPort, sPortName)//Gets the name of the device connected on port 'nPort'
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getSessionPIN(passCode)  //Function retrieves the "session" BT passcode stored in RAM. Upon power up, the default passcode is copied to the "session" passcode. Whenever firmware needs a BT passcode, it uses the current setting of the "session" passcode.\n\n\rF/W needs passcode for initializing the manual entry passcode. Also needs passcode if the "use default (i.e. session) passcode without entering manually" variable is set.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nxtReadRawBluetooth(pData, nMaxBufferSize)//Function used to read "raw" data bytes from the bluetooth module. 'pData' is the location of buffer where bytes should be stored and 'nMaxBufferSize' is the size of this buffer. The returned value is the number of bytes that was actually read.\n\n\rThe data is retrieved from the currently open 'port' or 'stream'.\n\n\rA typical use of this advanced function is for communicating with devices -- like a BT enabled GPS receiver -- that do not follow the LEGO defined "Fantom" messaging protocol.\n\n\rRaw data transmission should only be used when there is a single BT connection on the NXT.\n\n\rThe function "setBluetoothRawDataMode()" needs to be called to setup raw transmission.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nxtWriteRawBluetooth(nStream, pData, nLength)//Function used to write "raw" data bytes from the bluetooth module. 'pData' is the location of buffer where bytes should be stored and 'nMaxBufferSize' is the size of this buffer. The returned value is the number of bytes that was actually read.\n\n\rThe data is sent to the specified 'nSstream'.\n\n\rA typical use of this advanced function is for communicating with devices -- like a BT enabled GPS receiver -- that do not follow the LEGO defined "Fantom" messaging protocol.\n\n\rRaw data transmission should only be used when there is a single BT connection on the NXT.\n\n\rThe function "setBluetoothRawDataMode()" needs to be called to setup raw transmission.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nxtWriteRawBluetooth(pData, nLength)//Function used to write "raw" data bytes from the bluetooth module. 'pData' is the location of buffer where bytes should be stored and 'nMaxBufferSize' is the size of this buffer. The returned value is the number of bytes that was actually read.\n\n\rThe data is sent to the currently open 'port' or 'stream'.\n\n\rA typical use of this advanced function is for communicating with devices -- like a BT enabled GPS receiver -- that do not follow the LEGO defined "Fantom" messaging protocol.\n\n\rRaw data transmission should only be used when there is a single BT connection on the NXT.\n\n\rThe function "setBluetoothRawDataMode()" needs to be called to setup raw transmission.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   resetSessionPIN()        //Function resets the default BT passcode stored in RAM to the default value stored in flash.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sendMessageNew(nMessageID)//Internal function.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sendMessageOld(nMessageID)//Internal function.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setBluetoothOff()        //This function turns the Bluetooth module OFF.\n\n\rSetting BT off will disconnect any existing connections.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setBluetoothOn()         //This function turns the Bluetooth module ON.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setBluetoothRawDataMode()//This function sets the NXT Bluetooth configuration to "raw data transmission" mode. When in "raw mode" the LEGO defined higher level protocol (i.e. Fantom messages) is disabled and the application program can directly 'read' and 'write' bytes over an existing Bluetooth connection.\n\n\r"raw mode" can only be exited by the NXT firmware when an application program terminates execution.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setBluetoothVisibility(bBluetoothVisible)//This functions makes the NXT 'visible' or 'invisible' to search requests from other bluetooth devices.\n\n\rConnections can still be made to an 'invisible' device as long as the far end device already knows the BT address of the device.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setBluetoothVisibility(nResult, bBluetoothVisible)//Sets whether the NXT BT is visiible or invisible to searches from other Bluetooth devices
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setDefaultPIN(nResult, sPIN)//Sets a default PIN to use for Bluetooth connections (future)
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setDefaultPIN(passCode)  //Function sets the default BT passcode stored in flash.\n\n\rImmediately after firmware download, the default is set to "1234". This function allows you to change the default. The new default value is "permanent"; it is retained until the firmware is reloaded.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setFriendlyName(nResult, sFriendlyName)//Sets the "friendly name" that a NXT will be known by. Displayed on the top status line of the NXT LCD.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   setFriendlyName(sFriendlyName)//This function is used to set the "friendly name" of the NXT.\n\n\rThis is the name displayed centered on the top line of the NXT's LCD display.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setSessionPIN(passCode)  //Function sets the "session" BT passcode stored in RAM. Upon power up, the default passcode is copied to the "session" passcode. Whenever firmware needs a BT passcode, it uses the current setting of the "session" passcode.\n\n\rFirmware needs a passcode for initializing the manual entry passcode. Also needs passcode if the "use default (i.e. session) passcode without entering manually" variable is set.
Bluetooth,                Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   transferFile(nPort, sFileName)//Transfers the file 'sFileName' from this NXT to the NXT connected to port 'nPort'
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bBTBusy                  //Read-only boolean variable that indicates whether Bluetooth is currently busy processing a command.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   bBTDebugTrace            //Boolean variable for advanced users.\n\n\rEnables output of a debug trace of Bluetooth activity to the "Debug Stream" debugger output window.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bBTHasProgressSounds     //Boolean variable that enables or disables sound feedback on Bluetooth connect / disconnect and failure activities.\n\n\rDepending on whether a connection is "paired" connect and disconnect activities can occur silently. This variable will enable audible output to inform you of these actions.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bBTOptimizePerformance   //Boolean variable used to indicate whether Bluetooth transmission performance should be optimized. Optimized performance may not be compatible with other devices not programmed via ROBOTC.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   bBTRawMode               //Read-only variable that can be used to test whether NXT Bluetooth is currently in "raw data transmission mode". \n\n\rWhen in "raw mode" the LEGO defined higher level protocol (i.e. Fantom messages) is disabled and the application program can directly 'read' and 'write' bytes over an existing Bluetooth connection.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bBTSkipPswdPrompt        //Boolean variable used to indicate whether manual entry of Bluetooth password should be disabled. \n\n\rIf set, then the default value stored in  RAM (see the set/get session passcode functions will always be used.\n\n\rPassword entry using the NXT buttons and LCD can be awkward. This is a convenient way to bypass this entry if you're always going to use the same passcode.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bBTVisble                //Read-only boolean variable that indicates whether Bluetooth is 'visible' (true) or 'invisible' (false)
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kDefaultBTQueue          //Constant used for the default messaging queue (i.e. 0).
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kMaxMyContacts           //
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBluetoothCmdStatus      //Gets the status/progress of the last BT issued 'command'.\n\n\rCan be used to check whether the command is still in progress. Once completed the status contains the success or fail status of the command.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBluetoothState          //Gets the current BT state.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBTAvailOutSize          //
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBTCurrentStreamIndex    //Read-only variable containing the current active stream index. Value 0 is used for slave bluetooth devices. Value 1 to 3 is used for the three possible devices that can be connected on a master BT device. Value -1 is used if BT if there are no current BT connections. This variable is useful for checking if there is a current BT connection and whether the device is master or slave.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nBTLinkQuality[]         //This array (range 0 to 3) returns the last polled link quality of one of the BT connections. The value ranges from 0 to 255. You must first call the "btRequestLinkQuality(nPort)" function to poll the link quality from the NXT.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nBTStreamSwitchDelay     //Integer variable containing the delay interval used when switching Bluetooth from DATA to CMD mode.
Bluetooth,                Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nLastBTCommand           //Gets the last command processed by the Bluetooth firmware.

Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   anyButtonBumped(button, pressed);//Has any button been pressed and released"
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   setBlockBackButton(bBlocked);//Set UI 'back' button blocked flag"
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   anyButtonClicked(clicked);//Has any button been clicked (i.e. pressed and released)
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   checkForButtonLongPress(button);//Check if button has been 'pressed'. Clears 'pressed' flag.
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   checkForButtonPress(button);//Check if button has been 'long pressed'. Clears 'long pressed' flag.
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   flushButtonMessages();   //Flush unprocessed button messages
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   S,   generateButtonPress(button);//Generate button press
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   S,   generateButtonRelease(button);//Generate button release
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,            F,   A,   getButtonPress(button); // Get current state of a button
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   getButtonState(button, pressed);//Get current state of a button
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   getBlockBackButton(bBlocked);//Get UI 'back' button blocked flag
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   getHorizontalArrows(nResult);//get Horizontal arrows (-1, 0, +1)
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   getVerticalArrows(nResult);//get Vertical arrows (-1, 0, +1)
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   S,   testForButtonPress(button);//Check if button has been 'pressed'. Does not clear 'pressed' flag.
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   S,   testForButtonLongPress(button);//Check if button has been 'long pressed'. Does not clear 'long pressed' flag.
Buttons,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,						F,   A,   waitForButtonPress();    //Wait for keypress

Buttons,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNoButton                //Constant. Value of 'nNxtButtonPressed'when no button is pressed.
Buttons,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nNxtButtonPressed        //Contains the number (0 to 3) of the button that is currently depressed.\n\n\r-1 indicates no button is currently pressed.\n\n\rNote that only one button press can be recognized at a time. This is a limitation in the NXT hardware. It is unable to recognize multiple button presses.
Buttons,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nNxtButtonTask           //The variable serves two purposes. A negative value (default is  -1) indicates that the standard firmware processing of NXT buttons should be used. Values in the range of 0 or higher indicates that application program will process buttons.\n\n\rIf the value is in the range 0 to 9 (i.e. a valid task number) then this task will be started (or restarted) whenever a button press is detected.\n\n\r
Buttons,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nNxtButtonTransition     //
Buttons,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nNxtExitClicks           //Holds the number of 'clicks' of the EXIT button required to abort a program. Default value is one for compatibility with standard firmware.\n\n\rThis variable allows end user programs to use the EXIT button. If you set the variable to 'N' (where 'N' is greater than 1) then the first 'N-1' consecutive clicks of the EXIT button can be handled by the application program. On the N-th consecutive click the firmware will automatically EXIT (i.e. end)  your program.\n\n\rHaving the firmware perform the check ensures that, even if there is an error in your program, you can always EXIT your program. But it also easily allows your program to have access to the EXIT button.\n\n\rNOTE: With the standard NXT-G firmware, the EXIT button is not accessible to your program!
Buttons,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nNxtRemoteButton         //This is an internal variable used by ROBOTC's "NXT Remote Desktop" feature. It should not be used by the non-experienced users.\n\n\rWhen the value is non-negative it allows simulation of pressing one of the four NXT buttons and will override the actual state of which button is pushed.
Buttons,                  Variables,    R,         feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nOffButtonTask           //Internal use only.
Buttons,                  Variables,    R,         feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nRunButtonTask           //Internal use only.

Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   GetCameraConfig(config)  //Internal procedure used to setup the camera configuration. This function is automatically called by the compiler. It is triggered by the presense of "#pragma camera(....)" statements in the source program.
Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   GetTrackingParms(myData) //Obtains detailed information about the camera and copies to the 'myData' variable. The robot is constantly received tracking "packets" from the camera. The function will obtain the last complete packet received and copy it to a user variable. Once copied, the user program can work with these variables.
Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   ResetCameraConfigurationToDefault()//Advanced function to return the internal parameters used to set up the camera.
Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   SetCameraConfig(config)  //Internal procedure used to setup the camera configuration. This function is automatically called by the compiler. It is triggered by the presense of "#pragma camera(....)" statements in the source program.
Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   SetTrackingParms(config) //
Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   StartCamera()            //Starts the CMUCAM operation. The compiler automatically generates this code as part of the main task prolog whenever "#pragam camera(....) statements are detected in the program.
Camera,                   Commands,			NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   StopCamera()             //Stops the CMUCAM operation. The compiler automatically generates this code as part of the main task epilog whenever "#pragam camera(....) statements are detected in the program.
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bStreamCameraIOToPC      //Internal variabl to indicate that camera data is not processed within the robot firmware but is simply "streamed" (or redirected) to the communications port to the PC.
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nCameraConfidence        //This is an indication of the "confidence" of the tracking data. A value of zero indicates that the tracking data (horizontal and vertical) is not valid -- i.e. the color being traced was not found anywhere in the camera image.\n\n\rA high value indicates that pixels matching the tracked color were concentrrated in a single region rather than spread out throughout the camera image.\n\r
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nCameraHorizontal        //The horizontal position of the tracked color blob.  A value of zero is the center position of the camera view. \n\n\rThis value is the "weighted average" veritcal position of the pixels that matched the tracked color.
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nCameraStatus            //nCameraFields[amTrackingStatus] is the current status of the camera. It indicates the "health" of the camera and can be one of the values:\n\r  camStatusInactive                        Camera is not active\n\r  camStatusNoResponse                 Camera is not responding\n\r  camStatusSettingRegisters           ROBOTC firmwware is initializing the internal cameraregisters.\n\r  camStatusSettingResolution         ROBOTC firmwware is initializing the camera resolution\n\r  camStatusDownloadingConfig       ROBOTC firmwware is initializing the camera color tracking\n\r  camStatusTracking                        Camera is tracking coloirs and reporting results to ROBOTC firmware\n\r  camStatusShutdown                      ROBOTC firmware is shutting down the camera.
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nCameraTrackingPackets   //The number of tracking packets that have been received from the camera.\n\n\rThis field is incremented by one every time ROBOTC receives a "color tracking packet" from the camera. The packet is several bytes and reports the location of the tracked color within the camera's scanned image.\n\r
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nCameraVertical          //The vertical position of the tracked color blob. A value of zero is the center position of the camera view.\n\n\rThis value is the "weighted average" veritcal position of the pixels that matched the tracked color.
Camera,                   Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   trackingData             //

Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   addToDatalog(data)       //Adds an entry to the datalog.
Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   addToDatalog(nDataPtIndex, nDataValue)//Adds an entry to the datalog with user specified "data point" type.
Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   addToDatalogEnhanced(nFlags, data)//
Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   createDatalog(size)      //OBSOLETE function. Replaced with the variable "nDatalogSize".\n\n\rCreates a datalog of the specified size and initializes contents to empty (i.e no entries).
Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   saveNxtDatalog()         //Saves the existing datalog from RAM memory into a NXT file named "DATAnnnn.rdt" where 'nnnn' is numeric and increases by one on every save.
Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   uploadDatalog(nStart, nSize)//Internal.\n\n\rUsed by ROBOTC IDE to upload datalog from controller to PC.
Datalog,                  Commands,			NT,        feat_NaturalLanguageInActive, noFeatRest,                    	F, A,   addToDatalog(nDataPtIndex, data);//Adds an entry to the datalog with user specified "data point" type.
Datalog,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bHideDataFiles           //Boolean flag to indicate whether data files should be hidden or shown in the NXT GUI
Datalog,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nDatalogSize             //The current size allocated to the datalog. This represents the maximum amount of data thatcan be stored in the datalog. Once the datalog has been filled, subsequent calls to "AddToDatalog" simply discard the data.\n\n\rWriting any value to this variable will clear existing entries from the datalog.\n\n\rNOTE:  The datalog is not automatically cleared when a program starts running.
Datalog,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMaxDataFiles            //Maximum number of saved datalog files (DATAnnnn.RDT) allowed on a NXT. If you try to store additional files, then the oldest previous datalog file is deeted
Datalog,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMaxDataFileSize         //Maximum size (in 100 byte units) of all datalog files saved on the NXT. If you exceed this value with a new file, then older datalog files are deleted to make space.
Datalog,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nUsedDatalogBytes        //The number of bytes currently containing data in the datalog.

Debug,                    Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, I,   ArrayBoundCheck(nRunTimeValue, nRange)//Internal variables.
Debug,                    Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, I,   assert();                //Internal variables.
Debug,                    Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ASSERT(assertVar)        //Macro command used during debugging to catch unexpected/illegal conditions. Causes an exception and program abort when 'assertVar' is true.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   debugPrint(format, parm1, parm2)//Formats a string and prints it to the debug "stream" window on the PC.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   debugPrintLine(format, parm1, parm2)//Formats a string and prints it to the debug "stream" window on the PC. Once printed then starts a new line in the window.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getAvailSpaceInDebugStream()//
Debug,                    Commands,   ALL,				 feat_NaturalLanguageInActive,        noFeatRest,       F, I,   Set(nDestinationVariable, nSourceVariable)//Internal variables.
Debug,                    Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setBreakpoint(breakNumb, memoryIndex, nOffsetInSub);//Internal variables.
Debug,                    Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, A,   VERIFY(assertVar)        //Macro command used during debugging to catch unexpected/illegal conditions. Causes an exception and program abort when 'assertVar' is true.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeDebugStream(sFormatString)//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeDebugStream(sFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeDebugStream(pzFormatString);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeDebugStream(pzFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   writeDebugStreamLine(sFormatString)//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeDebugStreamLine(sFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeDebugStreamLine(pzFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   writeDebugStreamLine(pzFormatString)//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                    Commands,   NEV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   clearDebugStream();//Erase the contents of the debug stream on the robot controller.
Debug,                    Commands,   E,		  		 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setUserExceptionType1(); //
Debug,                    Commands,   E,		  		 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setUserExceptionType2(); //
Debug,                    Commands,   E,		  		 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setUserExceptionType3(); //
Debug,                    Commands,   E,		  		 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   throwBadSensorPortException(); //
Debug,                    Commands,   E,		  		 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setException(nExceptionType); //

Debug,                    Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bFloatConversionErrors   //When true, this variable will generate an exception if an out of range error occurs when converting a "float" value to an integer. The default value is no exception.\n\n\rROBOTC converts out of range float values to the largest possible integer value.
Debug,                    Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nDebugTaskMode           //Internal variables.

Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   clearLCDLine(nLine);     //Clears the indicated line of the VEX LCD to blanks
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   displayFileName(nLine, nSlot);//Displays the name of the file in file directory at slot 'nSlot'
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayLCDCenteredString(nLine, sString);//Displays a character string centered on the indicated line of the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayLCDCenteredString(nLine, pzString);//Displays a character string centered on the indicated line of the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayLCDChar(nLine, nPos, cChar);//Displays a specific character on the VEX LCD at the specified position
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayLCDNumber(nLine, nPos, nValue, nPrecision);//Displays an integer on the VEX LCD at the specified position
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   setLCDPosition(nLine, nPos);//Sets the next display position on the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   displayLCDPos(nLine, nPos);//Sets the next display position on the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayLCDString(nLine, nPos, sString);//Displays a character string on the VEX LCD at the specified position
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayLCDString(nLine, nPos, pzString);//Displays a character string on the VEX LCD at the specified position
Display,                  Variables,  V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bLCDBacklight            //Turns the backlight on the VEX LCD on or off.
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayNextLCDChar(cChar);//Displays a specific character on the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayNextLCDNumber(nValue, nPrecision);//Displays an integer number on the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayNextLCDString(sString);//Displays a character string on the VEX LCD
Display,                  Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   displayNextLCDString(pzString);//Displays a character string on the VEX LCD
Display,                  Variables,  V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nLCDRefreshRate

Display,                  Commands,   V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   drawUserText(nPixelRow, nPixelColumn, pFormatSpec, ...);//
Display,                  Commands,   V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   drawUserTextLine(nTextLine, pFormatSpec, ...);//
Display,                  Commands,   V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   eraseLCDScreen();        //
Display,                  Commands,   V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setUserDebugWindow(bSetting);//

Display,                  Commands,   ARV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawInvertEllipse(Left, Top, Right, Bottom)//
Display,                  Commands,   ARV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawInvertRect(Left, Top, Right, Bottom)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   eraseDisplay()           //Erases the complete NXT LCD display
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   clearPixel(xPos, yPos)//Clears a single pixel on the NXT LCD screen.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   setPixel(xPos, yPos)  //Sets a single pixel on the NXT LCD screen.
Display,                  Commands,   E,				 feat_NaturalLanguageInActive, noFeatRest,                      F, A,   invertPixel(xPos, yPos); //
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayBigStringAt(xPos, yPos, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayBigStringAt(xPos, yPos, sFormatString, ...)//Formats  a text string and displays it at any (X,Y) coordinate on the LCD display. Drawing uses a large font that is 16-pixels high.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayBigStringAt(xPos, yPos, sString)//Formats  a text string and displays it at any (X,Y) coordinate on the LCD display. Text is displayed using a double height font.

Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseBigStringAt(xPos, yPos, pChar, ...);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseBigStringAt(xPos, yPos, sFormatString, ...);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayInverseBigStringAt(xPos, yPos, pChar)//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayInverseBigStringAt(xPos, yPos, sFormatString)//

Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseString(nLineNumber, sFormatString, ...);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseStringAt(xPos, yPos, pChar, ...);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseStringAt(xPos, yPos, sFormatString, ...);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayInverseTextLine(nLineNumber, pChar, ...);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayInverseTextLine(nLineNumber, sFormatString, ...);//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayBigStringAt(xPos, yPos, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayBigStringAt(xPos, yPos, sFormatString)//

Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseString(nLineNumber, sFormatString)//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseStringAt(xPos, yPos, pChar)//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseStringAt(xPos, yPos, sFormatString)//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseTextLine(nLineNumber, pChar)//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayInverseTextLine(nLineNumber, sFormatString)//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayBigTextLine(nLineNumber, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayBigTextLine(nLineNumber, sFormatString, ...)//Formats  a text string and displays it on two of the 8 possible text lines. The remainder of the line is padded with blanks. Large double height font is used the display is twice the size of normal size font.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayBigTextLine(nLineNumber, sString)//Displays a text string on two of the 8 possible text lines. The remainder of the line is padded with blanks.Large double height font is used the display is twice the size of normal size font.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayBigTextLine(nLineNumber, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayBigTextLine(nLineNumber, sFormatString)//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayCenteredBigTextLine(nLineNumber, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayCenteredBigTextLine(nLineNumber, sFormatString, ...)//Formats  a text string and displays it on two consecutive of the 8 possible text lines. The text is horiztonally centered on the LCD display.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string. Large double height font is used the display is twice the size of normal size font.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayCenteredBigTextLine(nLineNumber, sString)//Displays a text string on one of the 8 possible text lines. The text is horiztonally centered on the LCD display. Large double height font is used; the display is twice the size of normal size font
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayCenteredBigTextLine(nLineNumber, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayCenteredBigTextLine(nLineNumber, sFormatString)//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayCenteredTextLine(nLineNumber, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayCenteredTextLine(nLineNumber, sFormatString, ...)//Formats  a text string and displays it on one of the 8 possible text lines. The text is horiztonally centered on the LCD display.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayCenteredTextLine(nLineNumber, sString)//Displays a text string on one of the 8 possible text lines. The text is horiztonally centered on the LCD display.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayCenteredTextLine(nLineNumber, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayCenteredTextLine(nLineNumber, sFormatString)//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayClearTextLine(nLineNumber)//Erases a line of text. 'nLineNumber' specifies one of the 8 possible text lines.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayIconFile(xPos, yPos, sFileName)//Displays a ICON file on the LCD screen at the specified coordinates (xPos, yPos).
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayRICFile(nleft, nBottom, sFileName)//Display a RIC (i.e. "ICON" or "Picture") file on the NXT display at the specified coordinates.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayString(nLineNumber, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayString(nLineNumber, sFormatString, ...)//Formats  a text string and displays it on one of the 8 possible text lines.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayString(nLineNumber, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayString(nLineNumber, sFormatString)//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayStringAt(xPos, yPos, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayStringAt(xPos, yPos, sFormatString, ...)//Formats  a text string and displays it at (xPos, yPos) coordinate on the LCD display.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayStringAt(xPos, yPos, sString)//Displays a text string  at (X,Y) coordinate on the LCD display
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayStringAt(xPos, yPos, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayStringAt(xPos, yPos, sFormatString)//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayTextLine(nLineNumber, pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayTextLine(nLineNumber, sFormatString, ...)//Formats  a text string and displays it on one of the 8 possible text lines. The remainder of the line is padded with blanks.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   displayTextLine(nLineNumber, sString)//Displays a text string on one of the 8 possible text lines. The remainder of the line is padded with blanks.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayTextLine(nLineNumber, pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   displayTextLine(nLineNumber, sFormatString)//

Display,                  Commands,   NE,				 feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawCircle(Left, Top, Radius)//Draws outline of the circle with the specified coordinates.
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawCircle(CenterX, CenterY, Radius);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawInvertCircle(CenterX, CenterY, Radius);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   eraseCircle(CenterX, CenterY, Radius);//
Display,                  Commands,   EAV3,      feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   fillCircle(CenterX, CenterY, Radius);//

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawEllipse(Left, Top, Right, Bottom)//Draws outline of the ellipse with the specified coordinates.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   eraseEllipse(Left, Top, Right, Bottom)//Erases (i.e. clears all pixels) the ellipse with the specified coordinates.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   fillEllipse(Left, Top, Right, Bottom)//Fills (i.e. all pixels black) the ellipse with the specified coordinates.

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawRect(Left, Top, Right, Bottom)//Draws outline of the rectangle with the specified coordinates.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   eraseRect(Left, Top, Right, Bottom)//Erases (i.e. clears all pixels) the rectangle with the specified coordinates.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   fillRect(Left, Top, Right, Bottom)//Fills (i.e. all pixels black) the rectangle with the specified coordinates.

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawLine(xPos, yPos, xPosTo, yPosTo)//Draws a line between two points.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   eraseLine(xPos, yPos, xPosTo, yPosTo)//Erases (i.e. clears) the pixels for the line between the specified pair of points.

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   invertLine(xPos, yPos, xPosTo, yPosTo)//Inverts the pixels for the given line.\n\n\rThis function is very useful for functions like drawing a "clock face", a "compass" or a gauge on the LCD screen when you want to "erase" the previous dial pointer and redraw it at a new position. If you use "invert line" for the original drawing and for the "erase" drawing the two calls will cancel each other out! And it work well if the line overdraws some existing pixels -- e.g. some text o nthe LCD.

Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   scrollText(pChar, ...)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   scrollText(sFormatString, ...)//Shift the LCD image up one line. Thenit  formats  a text string and displays it on the bottom line of the LCD text screen.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   scrollText(pChar)//
Display,                  Commands,   NEAV3,     feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   scrollText(sFormatString)//Shift the LCD image up one line. Thenit  formats  a text string and displays it on the bottom line of the LCD text screen.\n\n\r'sFormatString' is the format string to use and 'parm1' and 'parm2' are two optional parameters that can be used within the format string.

Display,                  Commands,   V3,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawUserText(nPixelRow, nPixelColumn, pFormatSpec)//
Display,                  Commands,   V3,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, A,   drawUserTextLine(nTextLine, pFormatSpec)//

Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyClearPixel       //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawEllipse      //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawIconFile     //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawLine         //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawRect         //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawStringAtCoordVarFmtSpec//Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawStringVarFmtSpec//Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyDrawTextLineVarFmtSpec//Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyEraseEllipse     //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyEraseRect        //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyEraseScreen      //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyFillEllipse      //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplyFillRect         //Internal Variable
Display,                  Commands,   N,        feat_NaturalLanguageInActive, feat_W_GraphicalLCDDisplay,      F, I,   nxtDsplySetPixel         //Internal Variable

Display,                  Commands,   V3,        feat_NaturalLanguageInActive, noFeatRest,											F, A,   drawTextCenteredInUserScreenArea(pText); //
Display,                  Commands,   V3,        feat_NaturalLanguageInActive, noFeatRest,											F, A,   eraseUserScreenArea(); //
Display,                  Commands,   V3,        feat_NaturalLanguageInActive, noFeatRest,											F, S,   getLcdScreenSize(X, Y);  //
Display,                  Commands,  	 V3,        feat_NaturalLanguageInActive, noFeatRest,											F, A,   getPixel(xPos, yPos);    //
Display,                  Variables,   V3,        feat_NaturalLanguageInActive, noFeatRest,											F, S,   bUserControlsLCDButtons //

Display,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bNxtLCDStatusDisplay     //Boolean variable that indicates whether the top status line display on the LCD should be present on user-drawn LCD screens.
Display,                  Variables,    V1V2V3A,   feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nLCDButtons              //Bit map containing which of the three buttons on the VEX LCD are depressed.
Display,                  Variables,    NTA,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nLCDContrast             //Sets the current contrast level. The setting will be lost when the robot is powered off.\n\n\r'90' is the default value used in the standard NXT-G firmware.
Display,                  Variables,    NTA,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nLCDContrastDefault      //Sets the current contrast level and also saves this value in non-volatile flash memory.\n\n\rThie variables shouldn't be written too many times because it writes to flash memory which has a limited (10K to 100K) count on the number of times that it can be written.\n\n\r'90' is the default value used in the standard NXT-G firmware.
Display,                  Variables,    AR,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nLCDRefreshCycles        //
Display,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nOnBrickProgrammingStep  //Used by RPGReader program to tell UI the current playback position
Display,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nViewStateNXT            //Controls which of the four different predefined LCD screen display formats should be used by running program.

Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawBrowse(color, X, Y, sizeX, sizeY, maxCharLength, browseType, pResultString);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawCircle(color, X, Y, radius);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawDottedLine(color, startX, startY, endX, endY, onPixels, OffPixels);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawKeyboard(color, X, Y, maxChars);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawLine(color, startX, startY, endX, endY);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawNotification(color, X, Y, icon1, icon2, icon3, pString, state);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawNumber(color, X, Y, value, length, numbOfDecimals);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawNumberValue(color, X, Y, value, length, numbOfDecimals);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawPicture(color, X, Y, pImage);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawPixel(color, X, Y);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawQuestion(color, X, Y, icon1, icon2, pQuestionChars, state, result);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawRectangle(color, startX, startY, endX, endY);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawRestore(levelNumber);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawScrollBar(color, X, Y, sizeX, sizeY, minValue, maxValue, currValue);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawStore(levelNumber);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIDrawText(color, X, Y, pText);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawTextbox(color, X, Y, sizeX, sizeY, pText, textboxSize, delimiters);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawTopline(bEnable);  //
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UiDrawViewUnit(color, X, Y, value, length, numbOfDecimals, maxCharLength, pChars);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIFillCircle(color, X, Y, radius);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   clearLCDScreen();             //
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIFillRectangle(color, startX, startY, endX, endY);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIFillWindow(color, startY, sizeY);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIInvertRectangle(startX, startY, endX, endY);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIScrollDisplay(rowsToScroll);//
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UISelectFont(fontType);  //
Display,                  Commands,     E,        feat_NaturalLanguageInActive,        noFeatRest,        F,   A,   UIUpdateLCD();           //
Display,                  Commands,     E,				feat_NaturalLanguageInActive,				 noFeatRest,        F,   A,   saveRestoreLCD(bRestoreSave);//
Display,                  Commands,     E,				feat_NaturalLanguageInActive,				 noFeatRest,        F,   A,   selectFont(fontType);    //Selects the standard font for drawing. THere are five different fonts.
Display,                  Commands,     E,				feat_NaturalLanguageInActive,				 noFeatRest,        F,   A,   drawBmpfile(X, Y, pFileName);//Draw an image file at the specified coordinates
Display,                  Commands,     E,				feat_NaturalLanguageInActive,				 noFeatRest,        F,   A,   drawIcon(X, Y, iconType, iconNumber);//Draw ICON with "index" at the specified coordinates
Display,                  Commands,     E,				feat_NaturalLanguageInActive,				 noFeatRest,        F,   A,   drawIconQuestion(X, Y, state, icons);//Use ICONs in a yes/no popup box selection

Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   getDriveTrainConfiguration(nDriveTrain);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   setDriveTrainMotors(nItsDriveTrainType, motorIndex0, motorIndex1, motorIndex2, motorIndex3);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   setDriveTrainWheels(nAxleLength, nGearRatioA, nGearRatioB, nWheelBase, nWheelDiameter);//

Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   driveStraight(nLeftMotor, nRightMotor, nSpeed);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   driveSynchronized(nLeftMotor, nRightMotor, nLeftSpeed, nRightSpeed);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   driveSynchronizedCancel(nMotor);//

Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   getDriveTrainJoysticks(nValueAxis_0, nValueAxis_1);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   getGripperArmConfiguration(nGripperArmType, nMotorIndex_0, nMotorIndex_1, nMotorIndex_2, nMotorIndex_3);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_DriveTrainConfiguration,	F, I,   setGripperArm(nItsGripperArmType, motorIndex0, motorIndex1, motorIndex2, motorIndex3);//
Drive Train,							Commands,     ALL,			feat_NaturalLanguageInActive,	feat_W_JoystickConfiguration,	F, I,   setJoystickDrive(nJoystickDriveType, nJoystickAxisScaling);//

Events,                   Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   CalibrateEvent(nEventNumber, lowerThreshold, upperThreshold, hysteresis)//
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   ClearAllEvents()         //
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   ClearEvent(nEventNumber) //
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   DirectEvent(nEventMask)  //
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   EVENT_MASK(nEvent)       //
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   ResetEvent(nEventNumber) //
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   SetEvent(nEvent, nSensor, nType)//
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   SetEvent(nEvent, nTimer, nType)//
Events,                   Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   SignalEvent(nEventNumber)//

Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   EST_SENSOR[]             //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventClicks[]            //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventCounts[]            //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventDuration[]          //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventHysteris[]          //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventLower[]             //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventState[]             //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventType[]              //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   eventUpper[]             //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nAcquirePriority         //
Events,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   taskEvents[]             //

FRC Digital IO,           Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   frcDigitalIODirection[]  //Sets the direction -- 'input' or 'output' -- for the FRC digital I/O pins.
FRC Digital IO,           Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   frcDigitalIOValue[]      //Boolean array to read or write the value for the FRC digital I/O pins.
FRC Digital IO,           Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   kNumbOfDigitalIO         //Constant defining the number (18) of digital I/O ports on the FRC.
FRC Relays,               Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   frcRelay16[]             //Provides individual control for each of the 16 FRC relays. \nRelay can be set ON (true) or OFF (false).
FRC Relays,               Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   frcRelay[]               //Provides control for each of the 8 pairs FRC relays. \nNormally a pair of relay outputs will be connected to an IFI "Spike" motor control modules. Relays can be set to one of the four states-- 'off', 'forward', 'reverse' and 'brake',
FRC Relays,               Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   kNumbOfFRCRelays         //Constant defining the number (8) of pairs of relay control available on the FRC.
FRC Relays,               Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   kNumbOfFRCSingleRelays   //Constant defining the number (16) of individual relay control available on the FRC.

File Access,              Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bValidFile(nFileIndex)   //Indicates whether the VEX file directory contains a valid file at the specified slot
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   close(hFileHandle, nIoResult)//Closes the specified file handle.\n\n\rThis should be the last file I/O operation after all reads or write are completed. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   closeAllHandles(nIoResult)//Internal function. Closes all handles opened by a program. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   delete(sFileName, nIoResult);//Deletes the specified filename from the NXT. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   delete(pzFileName, nIoResult);//Deletes the specified filename from the NXT. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   deleteFile(nFileIndex);  //
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   findFirstFile(hFileHandle, nIoResult, sSearch, sFileName, nFilesize);//Begins a search through the files in the NXT. 'nFileHandle' returns a handle to the first file found.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   findFirstFile(hFileHandle, nIoResult, pzSearch, sFileName, nFilesize);//Begins a search through the files in the NXT. 'nFileHandle' returns a handle to the first file found.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   findNextFile(hFileHandle, nIoResult, sFileName, nFilesize)//Finds the next file in a previously initiated search.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   openRead(hFileHandle, nIoResult, sFileName, nFileSize);//Opens 'sFileName' for reading. 'hFileHandle' is used for subsequent reads to this file. 'nFileSize' is filled with the file length. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   openRead(hFileHandle, nIoResult, pzFileName, nFileSize);//Opens 'sFileName' for reading. 'hFileHandle' is used for subsequent reads to this file. 'nFileSize' is filled with the file length. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   openWrite(hFileHandle, nIoResult, sFileName, nFileSize);//Opens 'sFileName' for writing with specified 'file size'. 'hFileHandle' is used for subsequent writes to this file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   openWrite(hFileHandle, nIoResult, pzFileName, nFileSize);//Opens 'sFileName' for writing with specified 'file size'. 'hFileHandle' is used for subsequent writes to this file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readByte(hFileHandle, nIoResult, nParm)//Reads a byte variable (8-bit) from the specified file.  'nIoResult' is non-zero when error occurs.
File Access,              Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   readByteX(hFileHandle, nIoResult, nParm)//Internal Variable
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readFloat(hFileHandle, nIoResult, fParm)//Reads a float variable from the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readLong(hFileHandle, nIoResult, nParm)//Reads a long integer variable (32-bit) from the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readShort(hFileHandle, nIoResult, nParm)//Reads a short integer variable (16-bit) from the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   rename(pzFileName, nIoResult, pzOriginalFileName);//Renames file 'sOriginalFileName' to 'sFileName'.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   rename(sFileName, nIoResult, sOriginalFileName);//Renames file 'sOriginalFileName' to 'sFileName'.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeByte(hFileHandle, nIoResult, nParm)//Writes a single byte to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeFloat(hFileHandle, nIoResult, fParm)//Writes a float variable to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeLong(hFileHandle, nIoResult, nParm)//Writes a long integer (32-bit) variable to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeShort(hFileHandle, nIoResult, nParm)//Writes a short integer variable (16-bit) to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeString(hFileHandle, nIoResult, sParm)//Writes a string to the specified file includint null terminator. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeString(hFileHandle, nIoResult, pzParm);//Writes a string to the specified file includint null terminator. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeText(hFileHandle, nIoResult, sParm);//Writes a string to the specified file without null terminator. 'nIoResult' is non-zero when error occurs.
File Access,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   writeText(hFileHandle, nIoResult, pzParm);//Writes a string to the specified file without null terminator. 'nIoResult' is non-zero when error occurs.

File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileClose(fileHandle);   //
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileDelCacheFile(cacheIndex);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileDelSubfolder(pFolderName, subFolderIndex);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileGetCacheFile(cacheIndex, maxChars, pFileName);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileGetCacheFiles(numbOfFilesInCache);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileGetFolders(pFolderName, numbOfSubFolders);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileGetHandle(pFileName, fileHandle, openForWrite);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileGetItem(pFolderName, pFileName, subFolderIndex);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileGetSubfolderName(pFolderName, subFolderIndex, maxChars, pFolderName2);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileMakeFolder(pFolderName, bSuccess);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileMove(pSource, pDest);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenameExist(pFileName, bExists);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenameGetFoldername(maxChars, pFolder);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenameMerge(pFolder, pName, pExtension, maxCharsInFilename, pFileName);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenamePack(pFileName); //
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenameSplit(pFileName, maxCharsInStrings, pFolder, pName, pExtension);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenameTotalSize(pFileName, numbOfFiles, totalSize);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilenameUnpack(pFileName);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileOpenAppend(pFileName, fileHandle);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileOpenRead(pFileName, fileHandle, sizeOfFile);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileOpenWrite(pFileName, fileHandle);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FilePutCacheFile(pFileName);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileReadBytes(handle, numbOfChars, pBytes);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileReadText(fileHandle, delimiters, maxChars, pText);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileReadValue(fileHandle, delimiters, value);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileRemove(pFileName);   //
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileWriteBytes(handle, numbOfChars, pBytes);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileWriteText(fileHandle, delimiters, pText);//
File Access,              Commands,     E,			 feat_NaturalLanguageInActive,        noFeatRest,       F,   I,   FileWriteValue(fileHandle, delimiters, value, totalChars, numbDecimalChars);//
File Access,              Variables,    NT,        feat_NaturalLanguageInActive, noFeatRest,                    F, A,   nAvailFlash              //The amount of flash memory that is currently unused and available for file storage. Units are 1/10 of 1K (i.e. 100 bytes).
File Access,              Variables,    ,          feat_NaturalLanguageInActive, noFeatRest,                    F, I,   tFileHandle              //Internal Variable

TETRIX Controller,        Variables,    NT,        feat_NaturalLanguageInActive, noFeatRest,                    F, B,   FTCMotor[]               //Used to set the power level of the two motors on the FTC servo controller.\n\n\rValues can range from -100 (full reverse) to +100 (full forward).\n\n\rNote: this is temporary definition for prototype hardware. The production hardware will be integrated with the "motor" value used for the three motor ports integrated on the NXT and will also include motor encoders.\n\n\rAn exception will occur if this variable is accessed and the servo controller is not enabled.
TETRIX Controller,        Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   FTCServoControlEnabled   //Boolean variable to indicate whether the FTC servo-motor controller is enabled.\n\n\rIn general, users do not need to access this variable because the ROBOTC compiler will automatically enable or disable depending on whether the platform type in the ROBOTC IDE is either "FTC" or otherise.\n\r
TETRIX Controller,        Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   FTCServoUsePrototype     //Boolean variable to indicate whether the ROBOTC firmware should use the prototype FTC servo-motor controllerhardware or whether they should use a "software emulation" mode.\n\n\rThe "software emulation" mode is for internal testing and allowed development of the servo controller device driver without actually requiring the hardware to be present.
TETRIX Controller,        Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   muxBattery               //Contains the battery level of the battery connected to the FTC servo-motor controller.\n\n\rThe battery level ranges from 0 to 15000 and is measured in millivolts.\n\n\rAn exception will occur if this variable is accessed and the servo controller is not enabled.
TETRIX Controller,        Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   muxLowBatteryShutdown    //
High Speed,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtGetAvailHSBytes()     //Returns the number of "raw" input bytes available on the RS-485 high speed serial link available on sensor port 4.
High Speed,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtReadRawHS(pData, nMaxBufferSize)//Reads "raw" (i.e. low-level, no protocol implemented) bytes from the RS-485 high speed serial link available on sensort port 4.\n\r
High Speed,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtSetHSBaudRate(nBaudRate)//Sets the baud rate for the high speed RS-485 serial link available on sensor port 4.
High Speed,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtWriteRawHS(pData, nLength, nAddress)//Writes "raw" (i.e. low-level, no protocol implemented) bytes to the RS-485 high speed serial link available on sensort port 4.
High Speed,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtWriteCharRawHS(nSingleChar, nAddress);//Writes "raw" (i.e. low-level, no protocol implemented) bytes to the RS-485 high speed serial link available on sensort port 4.
High Speed,               Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kDefaultBaudRate         //Default baud rate to use for the HS-485 high speed serial link
High Speed,               Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtHS_Mode               //
High Speed,               Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtHS_Status             //
VEX Competition Control,  Commands,   V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   #pragma autonomousDuration(<nDuration>)//#pragma' directive used for the IFI platforms to modify the duration used for the autonomous period of a competition. \n'nDuration' is the duration (in seconds) to use.
VEX Competition Control,  Commands,   V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   #pragma competitionControl(<state>)//#pragma' directive used for the IFI platforms to flag whether a program is being used for competition or autonomous operation. \n'state' indicates one of the following: \n'off' The robot controller will be configured for 'autonomous' operation \n'Competition' The robot controller will be configured for standard competitition. \n'AutonomousTest' The robot controller will be configured for testing the autonomous phase of a competition. The user phase duration will be zero. \n'UserTest' The robot controller will be configured for testing the user control phase of a competition. The autonomous duration will be zero
VEX Competition Control,  Commands,   V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   #pragma userControlDuration(<nDuration>)//#pragma' directive used for the IFI platforms to modify the duration used for the user control period of a competition. \n'nDuration' is the duration (in seconds) to use.
VEX Competition Control,  Variables,    V1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bIfiAutonomousMode       //Boolean variable to indicate whether robot is currently in autonomous or competition mode.\n\n\rIn autonomous mode, the robot can be freely "controlled" by software whether or not the robot's RF channel to base transmitter (VEX) or Operator Interface (FRC) is operational.\n\n\rIn competition mode, the robot software is configured for a  two phase robot competition: an initial autonomous operation phase where joystick values are masked followed by a 'user control' phase where the robot is controlled by the base station joysticks.
VEX Competition Control,  Variables,    V1,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bIfiAutonomousPhase      //Boolean variable that to indicate during a robot competition whether robot is in the 'autonomous' or 'user controlled' phase. This variable is only valid when the variable 'bIfiAutonomousMode' is 'false'.
VEX Competition Control,  Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bIfiPwmOverride          //Boolean flag to override the IFI robot controller PWM controller. Normally the PWM control is disabled (i.e. returns to zero power) when the FR channel link to the controller is lost.
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bIfiRobotDisabled        //OBSOLETE Boolean variable to indicate whether robot is currently in disabled competition mode.
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bVexAutonomousMode       //Backwards compatibility with VEX. Replaced by the variable 'bIfiAutonomousMode'
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nCurrCortexProgramType   //
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nIfiCompetitionState     //Enum variable to indicate whether robot is 'disabled', 'autonomous' or 'user control'.
VEX Competition Control,  Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nIfiUserCmd              //Internal use only
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nNextCortexProgramType   //
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nVEXDurationAutonomous   //Sets the numeric value (in seconds) of the autonomous phase of a competition. The value can only be set once and will subsequently be "latched".
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nVEXDurationUserControl  //Sets the numeric value (in seconds) of the user control phase of a competition. The value can only be set once and will subsequently be "latched".
VEX Competition Control,  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nVexRCReceiveState       //Numeric value containing the current state of the FR transmitter channel.
VEX Remote Control,       Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bIfiAutonomousModeBySlave//
VEX Remote Control,       Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bVEXNETActive            //Boolean flag indicating whether VEXNET WiFi or legacy 75 MHZ RF wireless transmission is used.
VEX Remote Control,       Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   frcOIJoystickButtons[]   //Array that contains the values of the joystick buttons from an FRC OI base transmitter.
VEX Remote Control,       Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   frcOILEDs[]              //FRC operator Interface "Robot Feedback" LED control
VEX Remote Control,       Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, B,   frcRF[]                  //Array that contains the values of the analog joysticks from an FRC RF base transmitter.
VEX Remote Control,       Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kNumbOfFrcRFJoysticks    //Constant containing the number of analog joystick channels on a FRC operator interface
VEX Remote Control,       Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kNumbOfOIJoystickButtons //Constant containing the number of joystick buttons on a FRC OI remote
VEX Remote Control,       Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kNumbOfOISensors         //Constant containing the number of analog joystick channels on a FRC OI remote
VEX Remote Control,       Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kNumbOfVexPSJoysticks    //
VEX Remote Control,       Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kNumbOfVexRFJoysticks    //Constant containing the number of analog joystick channels on a VEX RF handheld remote
VEX Remote Control,       Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nIfiSPIMsgCounts         //Variable counts the number of SPI messages received by the user CPU from the master CPU.
VEX Remote Control,       Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexSPIMsgCounts         //Backwards compatibility with VEX. Replaced by the variable 'nIfiSPIMsgCounts'
VEX Remote Control,       Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   vexPSC[]                 //Provides access to a playstation controller joysticks and buttons when connected to a VEX.
VEX Remote Control,       Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, B,   vexRT[]                  //Get the current value of a specific channel or button from the VEX Game Controller
VEX Remote Control,       Commands,     V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, B,   getJoystickValue(channel);  //Get the current value of a specific channel or button from the VEX Game Controller
IO Map Access,            Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtReadIOMap(sIOMapName, nIoResult, pBuffer, nOffset, nNumbOfBytes);//Reads a module's IOMap into the specified location
IO Map Access,            Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nxtWriteIOMap(sIOMapName, nIoResult, pBuffer, nOffset, nNumbOfBytes);//Writes a module's IOMap into the specified location
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bHasDatalog              //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bHasEvents               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bHasLCDDisplay           //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bHasSoundSupport         //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bMotorMirroring          //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bMultipleUserPrograms    //Internal use only
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bRelocateMemory          //Internal use only
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bSmartMotors             //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bUserMessagesAllowed     //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bUsesFlashStorage        //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   copyOpcodesToRAM         //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   ExtraArithmeticOpcodes   //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   FloatFloat               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   FloatLong                //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   FloatShort               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   FloatString              //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   fParmToReadByte          //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   genericParmArith         //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   INLINE                   //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   IS_LOADER_ERR(LStatus)   //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   LimitDefinitionsViaDefines_H__//Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   LoadBuildOptions__H_     //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   LongFloat                //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   LongLong                 //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   LongShort                //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   LongString               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   NxtStringOp__H_          //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ROBOTC                   //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sgn(inputF)              //Internal use only
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sgn(inputL)              //Internal use only
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ShortFloat               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ShortLong                //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ShortShort               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ShortString              //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   StringFloat              //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   StringLong               //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   StringShort              //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   StringString             //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   TFileIODefs__H_          //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   TNxtSynchMotors__H_      //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   TSensorTypes__H_         //Internal variables.
Internal,                 Commands,   ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   TSounds__H_              //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   constZero                //
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kConstantPoolSize        //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kDefaultTaskStackSizeInEntries//Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kFirmwareVersion         //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kMaxFlashBreakpoints     //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfBasicGlobalVariables//Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfBreakpoints       //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfEventCounters     //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfEvents            //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfEventSensorTypes  //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfGlobalVariables   //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfOpCodeParmTypes   //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfPrograms          //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfSubroutines       //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfTasks             //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfTaskVariables     //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kNumbOfTimers            //Internal variables.
Internal,                 Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kSizeOfBrickName         //Internal variables.
Internal,                 Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kSizeOfBtAddr            //Internal variables.
Internal,                 Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kSizeOfBtName            //Internal variables.
Internal,                 Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kSizeOfBtPincode         //Internal variables.
Internal,                 Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   kSizeOfClassOfDevice     //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kSizeOfSystemParameters  //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kStringSize              //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kTaskVariablesStart      //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kTotalNumbOfSubroutines  //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   neartype                 //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   noinit                   //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   no_init                  //Undefined Entries
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nResult                  //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nSize                    //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nThisTaskEvents          //Internal variables.
Internal,                 Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   opcdBAD                  //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   opcdSourceBadUndefined   //Undefined Entries
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   opcdSourceMaskForConditionalBr//Undefined Entries
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   opEnumType               //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ramfunc                  //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   rcxBad                   //Internal variables.
Internal,                 Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   romtype                  //Internal variables.
Internal,                 Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   vexInterruptPorts[]      //Internal variables.
Internal,                 Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nSensorWorkBetweenCyclesCounter //Internal variables.
Internal,                 Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVexIQUserTaskCurrTimeIncrementalTicks //Internal variables.
Internal,                 Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVexIQUserTaskCurrTimeSliceTotalTicks //Internal variables. 
Internal,                 Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVexIQUserTaskStartTick //Internal variables.
Internal,                 Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bVexIQI2CForceInlineWait
Internal,                 Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVexIQI2CSafeSendMessageTime

Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   closeMailbox(mailboxIndex);//Closes mailbox
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,				F,   A,   getMailboxMessageSize(mailboxIndex)//Get size of next message for mailbox. Negative value indicates no message available.
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,				noFeatRest,       F,	 A,   getMailboxMessageAvailable(mailboxIndex); //
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   getMailboxName(mailboxIndex, pMailboxName, nMaxNameLength);//Get the name assigned to a mailbox
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   readMailbox(mailboxIndex, pData, nReadLength);//Read data from mailbox
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   waitForMailboxMessage(mailboxIndex);//Wait for message to be available
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   testForMailboxMessage(mailboxIndex, bBusy);//Tests if new message is available
Mailboxes,								Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   openMailbox(mailboxIndex, pMailboxName);//Open a mailbox on the brick"
Mailboxes,								Variables,    ,				   feat_NaturalLanguageInActive,        noFeatRest,       F,   A,   kNumbOfMailboxes         //

Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   abs(input)               //Returns the absolute value of the input
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   acos(Cosine)             //Returns the arc cost value of the input
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   asin(Sine)               //Returns the arc sine value of the input
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   atan(Tangent)            //Returns the arc tan value of the input
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   atof(pzSrce)             //
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   atof(sSrce)              //
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   atoi(pzSrce)             //
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   atoi(sSrce)              //
Math,                     Commands,   ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   ceil(input)              //Returns the "ceil" value (i.e. next largest integer) of the input
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   cos(fRadians)            //Returns the cosine of the input (radians)
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   cosDegrees(nDegrees);      //Returns the cosine of the input (degrees)
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   degreesToRadians(nDegrees);//Converts degrees to radians
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   exp(input);               //Returns the exponential value of the input
Math,                     Commands,   ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   floor(input);             //Returns the "floor" value (i.e. next smallest integer) of the input
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   log(input);               //Returns the natural logarithm of the input value.
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   log10(input);             //Returns the base 10 logarithm of the input value.
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   pow(base, exponent);      //
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   radiansToDegrees(fRadians);//Converts radians to degrees
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   sgn(input);             //Returns -1, 0, +1 depending on whether the input is negative, zero or positive value
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   sin(fRadians);            //Returns the sine of the input (radians)
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   sinDegrees(nDegrees);      //Returns the sine of the input (degrees)
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sinDegreesX(fResult, degrees);//Internal Entries
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sinDegreesX(fResult, fRadians);//Internal Entries
Math,                     Commands,   ENTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, B,   sqrt(input);              //Returns the square root of te input
Math,                     Commands,   ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   srand(seed);              //Sets the random number generator seed to 'seed'
Math,                     Commands,   ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   srand(nSeedValue);          //Sets the random number generator seed to 'seed'
Math,                     Commands,   ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   atan2(Y, X);          //Returns the principal value of the arc tangent of y/x, expressed in radians.
Math,                     Commands,   ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   round(input);          //Round to integral value, regardless of rounding direction.
Math,                     Variables,  ENTV2V3A,   	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   PI                       //Returns the value of PI
Math,                     Variables,  ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   random(range);            //Returns a random number in the postive range zero to "range - 1".
Math,                     Variables,  ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   random[]                 //Returns a random number in the postive range zero to "range - 1".
Math,                     Variables,  ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   rand()                 //
Math,                     Variables,  ALL,       	feat_NaturalLanguageInActive, noFeatRest,                      	F, B,   randlong()              //

MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bMsgAvailable()          //
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bQueuedMsgAvailable()    //Boolean function that indicates whether a unprocessed message is available in the NXT's received message queue.
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   clearMessage()           //Clears the current message. The next time the "message" variable is accessed, the firmware will attempt to obtain the first message from the queue of messages received by the NXT.
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getMessage(nNodeIndex, pData, nMaxLength, nActualLength)//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getMyNodeIndex()         //
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getNetworkingStartupFinished()//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getNetworkingStatus()    //
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   resetNetworkDefinition() //
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendMessage(nMessageID)  //Sends a single 16-bit word message. 'nMessageID' should range in value form -32767 to +32767. Message value 0 is invalid and should not be used. It is a special value  to indicate "no message" received when using the "message" variable. The message is sent over BT.\n\rDo not send messages faster than about 1 message per 30 milliseconds or it is possible for some messages to be lost.
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendMessage(nNodeIndex, pData, nLength)//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendMessageWithParm(nMessageID, nParm1, nParm2)//Identical in function to the "sendMessage" opcode except that the message is three 16-bit values. This is useful in easily sending separate items of information in a single message.\n\rDo not use a value of zero for 'nMessageID'.
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendMessageWithWait(nNodeIndex, pData, nLength)//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessage(nMessage)     //
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessage1()            //
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessage2WordParm(nMessage, nParm1, nParm2)//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessage3WordParm(nMessage, nParm1, nParm2, nParm3)////Sends a multi-byte message over the RCX infrared channel.
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessageByteParm(nMessage, nParm)//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessageWithParm(nMessage, nParm)//
MultiRobot,               Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setMessageWordParm(nMessage, nParm)//
MultiRobot,               Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   message                  //Contains the value (value -32767 to + 32767) of the last message received over the bluetooth channel. Many messages can be queued at the receiving NXT. See the sample programs for technique to skip all but the last queued message.\n\n\rA value of '0' indicates that no message has been received of that the last received message has been processed by the user's program. The next time 'message' variable is accessed, it will get the next message, if available, from the queue of received messages stored by the NXT firmware.\n\n\rCall the "ClearMessage()" function to indicate that processing of the current message is complete.
MultiRobot,               Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   messageParm[]            //Contains optional message parms (up to 3 16-bit words) for messages received over the RCX infrared channel. 'messageParm[0]' is the same as the variable 'message'.

Miscellaneous,            Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   clearAll(nCommandFlags); //Internal command used by debugger.
Miscellaneous,            Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   getFirmwareDate(sDate)   //Gets string containing date and time of firmware load build.
Miscellaneous,            Commands,   NTV2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getPCJoystickSettings(joystick);//
Miscellaneous,            Commands,   NTV1V2A,   feat_NaturalLanguageInActive,        noFeatRest,       F, A,   memcpy(pToBuffer, pFromBuffer, nNumbOfBytes);//Function copies characters from 'pFromBuffer' to 'pToBuffer'. ‘nBytesToCopy’ is the number of bytes to copy.\n\n\rIdentical to the function found in conventional C 'string.h' library.
Miscellaneous,            Commands,   NTV2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   memmove(pToBuffer, pFromBuffer, nNumbOfBytes);//Function copies characters from 'pFromBuffer' to 'pToBuffer'. ‘nBytesToCopy’ is the number of bytes to copy.\n\n\rIdentical to the function found in conventional C 'string.h' library. The buffers can overlap addresses; in memcpy they cannot overlap.
Miscellaneous,            Commands,   NTV1V2A,   feat_NaturalLanguageInActive,        noFeatRest,       F, A,   memcmp(pToBuffer, pFromBuffer, nNumbOfBytes);//
Miscellaneous,            Commands,   NTV1V2A,   feat_NaturalLanguageInActive,        noFeatRest,       F, A,   memset(pToBuffer, nValue, nNumbOfBytes);//Sets a block of memory at ‘pBuffer’ to the value ‘nValue’. ‘nBytesToSet’ is the number of bytes to set.\n\n\rThis is a useful function for initializing the value of an array to all zeros.\n\n\rIdentical to the function found in conventional C 'string.h' library.\n\n\r
Miscellaneous,            Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bFastSonarSensor         //
Miscellaneous,            Variables,  V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bVexBlackEye             //Boolean flag to turn the VEX yellow LED "eye" off. Normally the eye flashes when their is program activity on the VEX.
Miscellaneous,            Variables,  ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   false                    //
Miscellaneous,            Variables,  ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   fResult                  //Internal
Miscellaneous,            Variables,  ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   lResult                  //Internal
Miscellaneous,            Variables,  V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nIfiSPIMsgCounts         //Numeric count of the number of messages received from the SPI channel to the master processor
Miscellaneous,            Variables,  NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nMotorBeingTrace         //
Miscellaneous,            Variables,  V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexMasterVersion        //Variable contains the firmware version for the VEX master CPU
Miscellaneous,            Variables,  ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   true                     //
Miscellaneous,            Variables,  ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   version                  //Contains the firmware version number.
Miscellaneous,            Commands,  	V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   getVexIqDeviceInfo(nDeviceIndex, nDeviceType, nDeviceStatus, nDeviceVersion); //

Motors,                   Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   changeSpeedRampingParms(nMotorIndex, nMinimumRampStartUpSpeed, nRampStartupChangeRate, nMinimumRampDownSpeed,nRampDownChangeRate);//

Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorTarget(nMotorIndex); 															//Returns the current motors target position value in 'Degrees' /n Note: To get the current position (and not target), use getMotorEncoder
Motors,                   Commands,     NEV3,			 noFeatRest, noFeatRest,                      			F, B, getMotorEncoder(nMotorIndex);	 														//Returns the current motor encoder position value in 'Degrees' (unless units are otherwise set)
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getServoEncoder(nMotorIndex); 															//Returns the current motor (in servo mode) encoder position value in 'Degrees' (unless units are otherwise set)
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, moveMotorTarget(nMotorIndex, nPosition, nSpeed); 					//Sets a motor to travel a set distance (specified by nPosition) from its relative position at specified speed.\n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorTarget(nMotorIndex, nPosition, nSpeed); 						//Sets a motor to travel a set distance (specified by nPosition) from its absolute position at specified speed.\n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, setServoTarget(nMotorIndex, nPosition); 										//Sets a motor (in servo mode) to travel a set distance (specified by nPosition) from its absolute position at specified speed.\n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorEncoderUnits(); 																		//Returns the type of units the motor encoders are currently using. By default, the motor encoders are set to "degrees".
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, setMotorEncoderUnits(nEncoderUnitMode); 										//Sets the types of units for all motors encoders. By default, the motors encoder are set to "degrees", but can be specified to "rotations" (1.0/rev) or "counts" (960/rev)
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorBrakeMode(nMotorIndex);														//Returns the Braking mode of the specified motor. Braking mode defaults to "Holding" on all motors.
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, S, getMotorCurrentLimitFlag(nMotorIndex);											//Returns a boolean flag indicating if the motor has exceeded its current limit specified by "Motor Strength".
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, S, getMotorOverTemp(nMotorIndex);															//Returns a boolean flag indicating if the motor has exceeded its internal temperature limit.
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorReversed(nMotorIndex);															//Returns a boolean flag indicating if the "reverse" mode has been enabled on a motor - This will flip the logical direction of motor speeds.
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorSpeed(nMotorIndex);																//Returns the current speed (in percent -100% to +100%) of the specified motor.

Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, S, getMotorZeroPosition(nMotorIndex);													//Returns a boolean flag indicating if the motor has reached within 1 degree (3 counts) of its current set target.
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, S, getMotorZeroVelocity(nMotorIndex);													//Returns a boolean flag indicating if the motor is not moving (true) or is moving (false).
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, getMotorMoving(nMotorIndex);																//Returns a boolean flag indicating if the motor is moving (true) or is stopped (false).
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, resetMotorEncoder(nMotorIndex);														//Resets the current encoder's value back to zero.
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, setMotorBrakeMode(nMotorIndex, nBrakeMode);								//Sets the Braking mode of a specified motor. Braking mode is at "Holding" by default, but can be set to "Brake" or "Coast"
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive, 				noFeatRest,       F, B, setMotorReversed(nMotorIndex, bReversed);									//Sets the “reversed” flag of a motor to logically switch the sign of motor speed commands.\nmotorPort: Name of motor to be modified. No default value – user must provide a motor name.\nreversedValue: A Boolean value of “true” or “false” to indicate if the motor should be reversed.
Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorSpeed(nMotorIndex, nSpeed);												//Sets the current speed of the motor in percent (-100% full reverse / 0% stop / +100% full forward)


Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, getMotorCurrent(nMotorIndex);														//Returns the amount of current being used by the specified motor in mA (milliamps).
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, setMotorCurrentLimit(nMotorIndex, nCurrent);									//Returns the value of current limiter setting of the specified motor in mA (milliamps).
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorCurrentLimit(nMotorIndex);															//Returns the current limiter setting of the specified motor in mA (milliamps).
Motors,                   Commands,     V3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A, updateMotorPWMScale(nMotorIndex);												//Reads the current VEX IQ Brain battery voltage and updates the VEX IQ motors "PWM Scale" to ensure consistent motor movement across all battery values. Note: This command is also executed at program start automatically in the firmware.

Motors,                   Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorSyncTime(nMotorOne, nMotorTwo, nTurnRatio, nTimeMsec, nSignedPower);
Motors,                   Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorSyncEncoder(nMotorOne, nMotorTwo, nTurnRatio, nEncoderCount, nSignedPower);

Motors,                   Commands,     EV3,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, waitUntilMotorStop(nMotorIndex);														//Command to delay (wait) until a specified motor has come to stop.
Motors,                   Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorSyncTime(nMotorOne, nMotorTwo, nTurnRatio, nTimeMsec, nSignedPower);
Motors,                   Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorSyncEncoder(nMotorOne, nMotorTwo, nTurnRatio, nEncoderCount, nSignedPower);

Motors,                   Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bFloatDuringInactiveMotorPWM//Boolean variable. True 'coasts' ('floats') the motor when power is not applied. False brakes the motor. \n\n\rFalse is best choice.
Motors,                   Variables,    NTV1V2A,   feat_NaturalLanguageInActive,        noFeatRest,       F, B,   bMotorReflected[]        //Boolean array. Used to indicate that the direction of a motor should be reflected 180 degrees. Useful when mechanical design results in a logical "reversed" condition of a motor.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   motorA                   //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   motorB                   //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   motorC                   //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   motorPWMLevel[]          //
Motors,                   Variables,    V1V2V3A,   feat_NaturalLanguageInActive,        noFeatRest,       F, B,   motor[]                  //Contains the motor power or speed level (-127 to +127). Negative values are reverse; positive formward. Zero is stopped.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   motor[]                  //Contains the motor power or speed level (-100 to +100). Negative values are reverse; positive formward. Zero is stopped.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C1_1              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C1_2              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C2_1              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C2_2              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C3_1              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C3_2              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C4_1              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S1_C4_2              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S2_C1_1              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S2_C1_2              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S2_C2_1              //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   mtr_S2_C2_2              //
Motors,                   Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nIfiPwmOwner             //Bitmap with one entry for each motor. Indicates whether motor PWM is generated by user CPU or by master CPU. An advanced programming feature.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMaxRegulatedSpeed       //Specifies the maximum speed, in encoder counts per secont, that should be used for speed regulation.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nMaxRegulatedSpeed12V    //
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nMaxRegulatedSpeedNxt    //
Motors,                   Variables,    NV2,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMotorEncoderTarget[]    //Sets the incremental encoder counts that a motor should move before system puts motor back in idle or stopped state. Zero means run forever.
Motors,                   Variables,    V3,				 feat_NaturalLanguageInActive, noFeatRest,											F, A,   nMotorEncoderTargetAbsolute[]//
Motors,                   Variables,    NV2,       feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nMotorEncoder[]          //Current value of the motor encoder.\n\n\rIn earlier versions of ROBOTC this was a "short" variable (-32K to +32K) it was possible to wraparound when the value grew larger than 16 bits. It is now a 32-bit long variable.\n\n\rWriting any value to the encoder will reset it to zero. You cannot write an arbitrary value to it.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMotorPIDSpeedCtrl[]     //Speed regulation type (non, speed, dual sync motor) for a motor.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMotorRunState[]         //Array containing the internal state (idle, ramping up or down, steady state speed, holding stopped positin) of a NXT motor. Useful in checking when a motor movement "command" has finished.
Motors,                   Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nPidUpdateInterval       //Interval (in milliseconds to use for NXT motor PID updates. Default is 25.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nPidUpdateInterval12V    //Interval (in milliseconds to use for 12V motor PID updates. Default is 25.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nRegulatedSpeed          //Maximum motor speed that should be used for regulated motor control. Default is 1000 counts/second which can only be achieved with fully charged alkaline/lithium batteries.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nSyncedMotors            //Used to specify synchronization of two NXT motors so they operate in 'lock step' at the same speed turn ratio.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nSyncedTurnRatio         //Turn ratio to use for a motor that is 'slaved' to another motor. +100 is same as primary motor. Zero is stopped. -100 is same movement as primary but in opposite directon. In between variables are proportional to primary motor.
Motors,                   Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nVexPwmOwner             //Backwards compatibility for VEX. Replaced by variable 'nIfiPwmOwner'.
Motors,                   Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVirtualMotorChanges     //Internal variable. Used in motor multiplexer applications.
Motors,                   Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMotorCurrentLimit[]     //
Motors,                   Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nMotorEncoderRaw[]       //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port1                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port2                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port3                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port4                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port5                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port6                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port7                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port8                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port9                    //
Motors,                   Variables,    V1V2V3,    feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port10                   //
Motors,                   Variables,    V3,	   feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port11                   //
Motors,                   Variables,    V3,	   feat_NaturalLanguageInActive,        noFeatRest,       F, I,   port12                   //

Motors,			              Variables,    V2,        feat_NaturalLanguageInActive, noFeatRest,											F, A,   motorType[]             //The type of a motor
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, B, getMotorEncoder(nMotor);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, B, getMotorTargetCompleted(nMotor);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, B, moveMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, B, resetMotorEncoder(nMotor);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, B, setMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, A, getEncoderForMotor(nMotorIndex);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, A, getEncoderAndTimeStamp(nMotor, nEncoder, nTimeStamp);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, A, mapEncoderToMotor(nMotorIndex, nSensorIndex);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, A, slaveMotor(nSlaveMotor, nMasterMotor);
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, A, mtrEncoderTargetReached[]
Motors,                   Integrated Encoders,  V2,     feat_NaturalLanguageInActive,        noFeatRest,       F, A, getMotorSlewSpeed(nMotor);

Preprocessor Defines,     Variables,    A,         feat_NaturalLanguageInActive,        noFeatRest,       F, A,   Ard                      //Preprocessor Variable. Contains the platform type for the current compilation
Preprocessor Defines,     Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   FTC                      //Preprocessor Variable. Contains the platform type for the current compilation
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfRealMotors        //Internal variables.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfRealSensors       //Internal variables.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfTotalMotors       //Internal variables.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfTotalSensors      //Internal variables.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfVirtualMotors     //Internal variables.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfVirtualSensors    //Internal variables.
Preprocessor Defines,     Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   NOT_A_HANDLE             //Preprocessor Variable. Contains the platform type for the current compilation
Preprocessor Defines,     Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   NXT                      //Preprocessor Variable. Contains the platform type for the current compilation
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   optionalBreakpoints      //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   optionalDebugSupport     //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   optionalExceptions       //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   optionalSwitchOpcodes    //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   optionalTrinaryOpcodes   //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   optionalUploadSupport    //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   useFloats                //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   useFloatsOrLongs         //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   useLongs                 //Internal variables.
Preprocessor Defines,     Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, A,   useParmForCurrOpPtr      //Internal variables.
Preprocessor Defines,     Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   VEX                      //Preprocessor Variable. Contains the platform type for the current compilation
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   _CUSTOM                  //Preprocessor Variable. Contains the type of compilation.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   _DEBUG                   //Preprocessor Variable. Contains the type of compilation.
Preprocessor Defines,     Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   _RELEASE                 //Preprocessor Variable. Contains the type of compilation.



Natural Language,         Setup,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   robotType(type);         //Choose which robot you want to write a program for. \nAcceptable robots: Recbot, Swervebot, Squarebot, and none.\n(If you don't use this function at all, it will default to none!)
Natural Language,         Movement,     V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   setServo(servoPort, position);//Rotates a servo to a specified position. \nRange: -127 to 127\nAcceptable Motor Ports: ports 2 through 9,(and your names for them given in Motors and Sensors Setup.)
Natural Language,          Movement,     V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   startMotor(motorPort, speed);//Start a motor at a specified speed.\nRange: -127 to 127\nAcceptable Motors: ports 1 through 10,(and your names for them given in Motors and Sensors Setup.)
Natural Language,         Movement,     V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   stopMotor(motorPort);    //Stops a motor./nAcceptable Motors: ports 1 through 10, (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   arcadeControl(verticalJoystick, horizontalJoystick, threshold);//Enables "arcade" style remote control of a robot. \nNote: Command must be placed in a loop to enable continuous control.
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   backward(speed);         //Both wheels rotate backward at the same speed and the robot moves straight backward.\nRange: -127 to 127\n(Backward will always move your robot backward.)
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   forward(speed);          //Both wheels rotate forward at the same speed and the robot moves straight forward.\nRange: -127 to 127\n(Forward will always move your robot forward.)
Natural Language,         Robot Motion, V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   lineTrackForRotations(rotations, threshold, leftSensorPort, centerSensorPort, rightSensorPort);//The robot will track a black line on a white surface for a specified distance in rotations.\nThreshold Range: (light) 0 to 4095 (dark)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   lineTrackForRotations(rotations, threshold, sensorPort);//The robot will track a black line on a white surface for a specified distance in rotations.\nThreshold Range: (light) 0 to 100 (dark)\nAcceptable Sensors: Sensor ports 1 through 4 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   lineTrackForTime(trackTime, threshold, leftSensorPort, centerSensorPort, rightSensorPort);//The robot will track a black line on a white surface for a specified time in seconds.\nThreshold Range: (light) 0 to 4095 (dark)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   lineTrackForTime(trackTime, threshold, sensorPort);//The robot will track a black line on a white surface for a specified time in seconds.\nThreshold Range: (light) 0 to 100 (dark)\nAcceptable Sensors: Sensor ports 1 through 4 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   moveStraightForRotations(rotations, rightEncoderPort, leftEncoderPort);//Uses feedback from the shaft encoders to self correct forward movements for a specified number of rotations. \nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   moveStraightForTime(seconds, rightEncoderPort, leftEncoderPort)//Uses feedback from the shaft encoders to self correct forward movements for a specified number of seconds. \nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   pointTurn(direction, speed);//Both wheels rotate at the same speed but in opposite directions, causing the robot to turn around it's center. This makes a sharp turn in place.\nRange: -127 to 127\n\nThe Directions allowed are: right, left
Natural Language,         Robot Motion, V2,    feat_NaturalLanguageActive,          noFeatRest,       T, B,   stop();                  //Both wheels do not move, causing the robot to stop.
Natural Language,         Robot Motion, V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   swingTurn(direction, speed);//One wheel rotates while the other does not move, causing the robot to turn around the stopped wheel. This makes a wide turn.\nRange: -127 to 127\n\nThe Directions allowed are: right, left
Natural Language,         Robot Motion, V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   tankControl(rightJoystick, leftJoystick, threshold);//Enables basic "tank" style remote control of a robot. \nNote: Command must be placed in a loop to enable continuous control.
Natural Language,         Wait,         V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   wait(waitTime);									//Wait an amount of time measured in seconds.
Natural Language,         Wait,         V2,    feat_NaturalLanguageActive,          noFeatRest,       T, B,   waitInMilliseconds(waitTime);		//Wait an amount of time measured in milliseconds.
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilBump(sensorPort, delayTimeMS);//The robot does what it was doing until the touch sensor is pressed in and then released out.\nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)\nAcceptable Delay Times: 0 to 3,600,000 milliseconds.
Natural Language,         Until,        V2,      feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilButtonPress(button);//The robot does what it was doing until a button on the LCD is pressed.\nAcceptable Buttons: centerBtnVEX, rightBtnVEX, leftBtnVEX
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilDark(threshold, sensorPort);//The robot does what it was doing until the light sensor reads a value darker than the threshold.\nRange: (light) 0 to 4095 (dark) \nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilEncoderCounts(distance, sensorPort);//The robot does what it was doing until the encoder counts match the desired value. \nRange: 0 to >65000\nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilLight(threshold, sensorPort);//The robot does what it was doing until the light sensor reads a value lighter than the threshold.\nRange: (light) 0 to 4095 (dark) \nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilPotentiometerGreaterThan(position, sensorPort);//The robot does what it was doing until the potentiometer reads a value greater than a set position value.\nRange: 0 to 4095 (+-5 due to mechanical stops)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilPotentiometerLessThan(position, sensorPort);//The robot does what it was doing until the potentiometer reads a value less than a set position value.\nRange: 0 to 4095 (+-5 due to mechanical stops)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilRelease(sensorPort);//The robot does what it was doing until the touch sensor is released.\nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilRotations(rotations, sensorPort);//The robot does what it was doing until the encoder rotations match the desired value.\nRange: 0 to >65000 \nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilSonarGreaterThan(distance, sensorPort);//The robot does what it was doing until the sonar sensor reads a value greater than a set distance in centimeters.\nRange: 0 to 647 (A value of -1 means it cannot detect anything.) \nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilSonarLessThan(distance, sensorPort);//The robot does what it was doing until the sonar sensor reads a value less than a set distance in centimeters.\nRange: 0 to 647 (A value of -1 means it cannot detect anything.) \nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   untilTouch(sensorPort);  //The robot does what it was doing until the touch sensor is pressed in.\nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,         Until,        V2,       feat_NaturalLanguageActive, feat_W_DbgTargetVirtualWorld, T, B, untilCompassDegrees(degrees, buffer)  //The robot does what it was doing until the compass sensor reaches the desired heading in degrees, +- buffer size.\nNote that it is possible to skip over the desired heading if moving too fast; increasing the buffer size can resolve this.
Natural Language,         Special,      V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   turnFlashlightOff(flashlightPort);//Turns off a VEX Flashlight. \nAcceptable Motor Ports: motor ports 1 through 10,(and your names for them given in Motors and Sensors Setup.)
Natural Language,         Special,      V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   turnFlashlightOn(flashlightPort, brightness);//Turns on a VEX Flashlight at the specified brightness. \nAcceptable Motor Ports: motor ports 1 through 10,(and your names for them given in Motors and Sensors Setup.) \nNote: Brightness control only available in Motor ports 1 and 10, or 2 through 9 when connected to a VEX Motor Controller 29. \nRange: 0 to 127
Natural Language,         Special,      V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   turnLEDOff(digitalPort); //Turns a LED Off in the specified digital sensor port. \nAcceptable Sensor Ports: digital ports 1 through 12,(and your names for them given in Motors and Sensors Setup.)
Natural Language,         Special,      V2,        feat_NaturalLanguageActive,          noFeatRest,       T, B,   turnLEDOn(digitalPort);  //Turns a LED On in the specified digital sensor port. \nAcceptable Sensor Ports: digital ports 1 through 12,(and your names for them given in Motors and Sensors Setup.)



Natural Language,         Setup,        NEV3,		     feat_NaturalLanguageActive,          noFeatRest,                      T, A,   setMotorReversed(nMotorIndex, bReversed);
Natural Language,         Timing,       NEV3,      	 feat_NaturalLanguageActive,          noFeatRest,                          T, B,   wait(quantity, unitType); 					//Delays your program by waiting a specified amount of time before processing any additional commands inside of your program. \nquantity: The number of “unitType” - There is no default value for ‘quantity’. \nunitType: seconds (default), milliseconds, minutes.
Natural Language,         Timing,       NEV2V3,      	 feat_NaturalLanguageActive,          noFeatRest,       				   T, B,   resetTimer(currentTimer); 					//Resets the specified timer back to zero seconds. \ncurrentTimer: The name of one of four (4) times - ‘timer1’ (default), ‘timer2’, ‘timer3’, timer4’.
Natural Language,         Timing,       NEV3,      	 feat_NaturalLanguageActive,          noFeatRest,       				   F, B,   getTimer(currentTimer, unitType); 	//Returns the value of the specified timer as a decimal (1.23) number in the specified units. This value can be used as a condition for a loop to create timing based actions. \ncurrentTimer: The name of one of four (4) times - ‘timer1’ (default), ‘timer2’, ‘timer3’, timer4’. \nunitType: seconds (default), milliseconds, minutes.
Natural Language,         Simple Behaviors,	 NEV3,      		feat_NaturalLanguageActive,   noFeatRest,                      T, B, forward(quantity, unitType, speed); 																				//Moves your robot in the forward direction for a specific distance/time at a specific speed. The robot will come to a stop after it completes its movement.\nquantity: The number of “unitType” (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds.\nspeed: 0 to 100 (default of 50) \n(Forward will always move your robot Forward.)
Natural Language,         Simple Behaviors,  NEV3,      		feat_NaturalLanguageActive,   noFeatRest,                      T, B, backward(quantity, unitType, speed); 																				//Moves your robot in the reverse (backwards) direction for a specific distance/time at a specific speed. The robot will come to a stop after it completes its movement.\nquantity: The number of “unitType” (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds.\nspeed: -100 to 0 (default of -50) \n(Backward will always move your robot backward.)
Natural Language,         Simple Behaviors,  NEV3,      		feat_NaturalLanguageActive,   noFeatRest,                      T, B, turnLeft(quantity, unitType, speed); 																				//Rotates your robot to the left using a “point” turn. The robot will come to a stop after it completes its movement. \nquantity: The number of “unitType” (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds.\nspeed: 0 to 100 (default of 50)
Natural Language,         Simple Behaviors,  NEV3,      		feat_NaturalLanguageActive,   noFeatRest,                      T, B, turnRight(quantity, unitType, speed); 																				//Rotates your robot to the right using a “point” turn. The robot will come to a stop after it completes its movement. \nquantity: The number of “unitType” (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds.\nspeed: 0 to 100 (default of 50)
Natural Language,         Simple Behaviors,  NEV3,      		feat_NaturalLanguageActive,   noFeatRest,                      T, B, moveMotor(motorPort, quantity, unitType, speed); 																	//Rotates the specified motor for a specific duration. The motor will come to a stop after it completes its movement. \nmotorPort: The motor being controlled (default is motor10).\nquantity: The number of “unitType” (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds.\nspeed: 0 to 100 (default of 50)
Natural Language,         Motor Commands,		NEV3,      			feat_NaturalLanguageActive,   noFeatRest,                  T, B, setMotor(motorPort, speed); 																									//Sets the speed of an individual motor port. \nmotorPort: Name of motor to be controlled by the command. (default is motor1).\nspeed: The rotational speed of the motor in percent (-100 to +100). Positive numbers will rotate the motor clockwise (forward) and negative numbers will rotation the motor counterclockwise (reverse). Default value is ‘50’.
Natural Language,         Motor Commands,  	EV3,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, setMultipleMotors(speed, firstMotor, secondMotor, thirdMotor, fourthMotor); 	//Sets the speed for up to 4 motors at the same time. \nspeed: The rotational speed of the motor in percent (-100 to +100). Default value is ‘50’.\nfirstMotor: Name of first motor to set to the specified speed. No default value. \nsecondMotor: Name of second motor to be set to the speed. This parameter is optional. \nthirdMotor: Name of third motor to be set to the speed. This parameter is optional. \nfourthMotor: Name of fourth motor to be set to the speed. This parameter is optional.
Natural Language,         Motor Commands,  	N,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, setMultipleMotors(speed, firstMotor, secondMotor, thirdMotor); 	//Sets the speed for up to 3 motors at the same time. \nspeed: The rotational speed of the motor in percent (-100 to +100). Default value is ‘50’.\nfirstMotor: Name of first motor to set to the specified speed. No default value. \nsecondMotor: Name of second motor to be set to the speed. This parameter is optional. \nthirdMotor: Name of third motor to be set to the speed. This parameter is optional.
Natural Language,         Motor Commands,  	NEV3,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, stopMotor(motorPort); 																												//Command to stop an individual motor. \n motorPort: Name of motor to be controlled by the command (default is motor1).
Natural Language,         Motor Commands,  	EV3,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, stopMultipleMotors(firstMotor, secondMotor, thirdMotor, fourthMotor); 				//Stops up to 4 motors at the same time. \nfirstMotor: Name of first motor to set to be stopped. No default value. \nsecondMotor: Name of second motor to be stopped. This parameter is optional. \nthirdMotor: Name of third motor to be stopped. This parameter is optional. \nfourthMotor: Name of fourth motor to be stopped. This parameter is optional.
Natural Language,         Motor Commands,  	N,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, stopMultipleMotors(firstMotor, secondMotor, thirdMotor); 				//Stops up to 3 motors at the same time. \nfirstMotor: Name of first motor to set to be stopped. No default value. \nsecondMotor: Name of second motor to be stopped. This parameter is optional. \nthirdMotor: Name of third motor to be stopped. This parameter is optional.
Natural Language,         Motor Commands,  	NEV3,      	 		feat_NaturalLanguageActive,   noFeatRest,                      T, B, stopAllMotors(); 																														//Command to stop all motors connected to the robot. This command takes no parameters – the robot will instantly stop when ‘stop’ is called.
Natural Language,         Motor Commands,   NEV3,				    feat_NaturalLanguageActive,   noFeatRest,       		   T, B, resetMotorEncoder(nMotorIndex);														//Resets the current encoder's value back to zero.
Natural Language,         Motor Commands,   NEV3,				    feat_NaturalLanguageActive,   noFeatRest,       		   T, B, setMotorTarget(nMotorIndex, nPosition, nSpeed); 						//Sets a motor to travel a set distance (specified by nPosition) from its absolute position at specified speed.\n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Natural Language,         Remote Control,   NEV3,   		   	feat_NaturalLanguageActive,   noFeatRest,                      T, B, arcadeControl(verticalJoystick, horizontalJoystick, threshold); 							//Remote control of your robot by using a single joystick (X and Y). This command must be inside of a loop in order to work. \n Default Values: \nverticalJoystick: ChA \nhorizontalJoystick: ChB \nthreshold: 10
Natural Language,         Remote Control,		NEV3,      			feat_NaturalLanguageActive,   noFeatRest,                  T, B, tankControl(rightJoystick, leftJoystick, threshold); 												//Remote control of your robot by using two joystick axes (Y and Y). This command must be inside of a loop in order to work. \n Default Values: \nrightJoystick: ChD \nleftJoystick: ChA \nthreshold: 10
Natural Language,         Remote Control,   NEV3,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, armControl(armMotorPort, upButton, downButton, armSpeed); 										//Remote control of a motor on your robot by using wireless controller buttons. This command must be inside of a loop in order to work. \n Default Values: \narmMotorPort: No Default \nupButton: BtnRUp \ndownButton: BtnRDown \narmSpeed: 75
Natural Language,         Remote Control,   NEV3,      			feat_NaturalLanguageActive,   noFeatRest,                      T, B, setJoystickScale(nScaledPercentage);

Natural Language,         Line Tracking,    NEV3,      	 		feat_NaturalLanguageActive,   noFeatRest,                      T, B, lineTrackLeft(sensorName, threshold, speedPrimary, speedSecondary); 					//Follow the left edge of a line using the VEX IQ Color Sensor.\nThis command must be inside of a loop in order to work effectively.\nsensorName: Name or port of the VEX IQ Color Sensor. There is no default value. \nthreshold: The averaged value (from the line color and background surface) – Default value of 50. \nspeedPrimary: The speed of the motor used to actively follow the line (the leading wheel). Default value of ‘50’. \nspeedSecondary: The speed of the motor used to pivot when following the line (the training wheel). Default value of ‘0’.
Natural Language,         Line Tracking,    NEV3,      	 		feat_NaturalLanguageActive,   noFeatRest,                      T, B, lineTrackRight(sensorName, threshold, speedPrimary, speedSecondary); 				//Follow the right edge of a line using the VEX IQ Color Sensor.\nThis command must be inside of a loop in order to work effectively. \nsensorName: Name or port of the VEX IQ Color Sensor. There is no default value. \nthreshold: The averaged value (from the line color and background surface) – Default value of 50. \nspeedPrimary: The speed of the motor used to actively follow the line (the leading wheel). Default value of ‘50’. \nspeedSecondary: The speed of the motor used to pivot when following the line (the training wheel). Default value of ‘0’.



Semaphore,                Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   semaphoreInitialize(nSemaphore);//Initialize a semaphore
Semaphore,                Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   semaphoreLock(nSemaphore, waitTime);//Wait up to 'waitTime' milliseconds to lock (i.e. get exclusive access) to semaphore 'nSemaphore'
Semaphore,                Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   semaphoreUnlock(nSemaphore);//Release a previously locked semaphore.

Sensors,                  Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, I,   clearSensorValue(nSensor)//Obsolete function. Do not use.
Sensors,                  Commands,   ,            feat_NaturalLanguageInActive,        noFeatRest,       F, S,   getColorSensorData(nPort, nDataType, pData)//
Sensors,                  Commands,   ,            feat_NaturalLanguageInActive,        noFeatRest,       F, S,   getColorSensorPegCounts(nPort, pData)//
Sensors,                  Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, I,   getSensorRawADValue(nPort)//
Sensors,                  Commands,   NT,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setSensorMode(nSensor, mode)//Sets the mode (Raw, percentage, ...) of a sensor. Default mode is usually percentage and sensor will have a value range of 0 to 100.
Sensors,                  Commands,   ,            feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setSensorType(nSensor, type)//Sets the type (touch, light, sound, sonar, wtc) of a sensor
Sensors,                  Commands,   ,            feat_NaturalLanguageInActive,        noFeatRest,       F, S,   validColorSensor(nPort)  //
Sensors,                  Commands,   ALL,         feat_NaturalLanguageInActive,        noFeatRest,       F, S,   shiftOut(dataPin, clockPin, bBitOrderLSBFirst, nValue, nDelay);  //Shifts out a byte of data one bit at a time. Starts from either the most or least significant bit. Each bit is written in turn to a data pin, after which a clock pin is pulsed (taken high, then low) to indicate that the bit is available. 
Sensors,                  Commands,   ALL,         			feat_NaturalLanguageInActive,        noFeatRest,       F, S, shiftIn(dataPin, clockPin, bBitOrderLSBFirst, nValue, nDelay); //Shifts in a byte of data one bit at a time. Starts from either the most or least significant bit. Each bit is written in turn to a data pin, after which a clock pin is pulsed (taken high, then low) to indicate that the bit is available. 

Sensors,                  Bumper Sensor,    V3,        		noFeatRest, noFeatRest,       									F, B,   getBumperValue(nDeviceIndex); 																		//Returns the value of the Bumper Sensor.\n1 - Pressed \n0 - Released
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getColorBlueChannel(nDeviceIndex); 															//Returns the value of the Blue Channel of the Color Sensor (in Hue / Color Mode)
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getColorGreenChannel(nDeviceIndex); 															//Returns the value of the Green Channel of the Color Sensor (in Hue / Color Mode)
Sensors,                  Color Sensor,     V3,        		noFeatRest, noFeatRest,                         F, B,   getColorHue(nDeviceIndex); 																			//Returns the Hue value (0-255) of the Color Sensor.
Sensors,                  Color Sensor,     V3,        		noFeatRest, noFeatRest,                         F, B,   getColorName(nDeviceIndex); 																			//Returns one of 12 color names detected by the color Sensor.\nAcceptable Names: \ncolorRedViolet / colored \ncolorDarkOrange / colorOrange \ncolorDarkYellow / colorYellow\ncolorLimeGreen / colorGreen\ncolorBlueGreen / colorBlue\ncolorDarkBlue / colorViolet\nNo Color Detected: colorNone
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, A,   getColorProximity(nDeviceIndex); 																//Returns the proximity value of the color sensor.\nProximity Values have no units.\nLow numbers = far away\nHigher numbers = close
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getColorRedChannel(nDeviceIndex); 																//Returns the value of the Red Channel of the Color Sensor (in Hue / Color Mode)
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getColorSaturation(nDeviceIndex); 																//Returns the color saturation value of the Color Sensor (in Hue / Color Mode)
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getColorAdvanced(nDeviceIndex, pInfo);														//Returns a structure (TColorInfo) containing all information regarding the Color Sensor
Sensors,                  Color Sensor,     V3,        		noFeatRest, noFeatRest,                         F, B,   getColorGrayscale(nDeviceIndex);																	//Returns the grayscale value of the Color Sensor (in Grayscale/Line Detection mode only)
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, A,   getColorMode(nDeviceIndex);																			//Returns the mode setting of the Color Sensor.
Sensors,                  Color Sensor,     V3,        		noFeatRest, noFeatRest,                         F, B,   getColorValue(nDeviceIndex);																			//Returns the value of sensor, depending on mode (Hue/Name/Grayscale)
Sensors,                  Color Sensor,     V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, A,   setColorMode(nDeviceIndex, nColorMode);													//Sets the mode (Grayscale/Hue/Name) of the Color sensor.

Sensors,                  TouchLED Sensor,  V3,           noFeatRest, noFeatRest,                         F, B,   getTouchLEDValue(nDeviceIndex);																	//Returns the value of Capacitive Touch Sensor on the TouchLED. \n1 - Pressed \n0 - Released
Sensors,                  TouchLED Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   setTouchLEDBlinkTime(nDeviceIndex, nBlinkOnTime, nBlinkOffTime);	//Sets the blinking rate of the TouchLED. \n Blink Time is specified in .05 increments (20 = 1 second)\nSet either blink rate to zero to disable blinking.
Sensors,                  TouchLED Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   setTouchLEDBrightness(nDeviceIndex, brightness);									//Sets the output brightness of the TouchLED without adjusting the ratios of the R/G/B channels.
Sensors,                  TouchLED Sensor,  V3,           noFeatRest, noFeatRest,                         T, B,   setTouchLEDColor(nDeviceIndex, nColor);													//Sets the output color of the TouchLED using one of 12 color names.\nAcceptable Names: \ncolorRedViolet / colorRed \ncolorDarkOrange / colorOrange \ncolorDarkYellow / colorYellow\ncolorLimeGreen / colorGreen\ncolorBlueGreen / colorBlue\ncolorDarkBlue / colorViolet\nNo Color Detected: colorNone
Sensors,                  TouchLED Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   setTouchLEDFade(nDeviceIndex, fadeSetting);											//Sets the fading mode of the TouchLED. This allows the touchLED to fade smoothly between colors. Fade modes start with "colorFade..."
Sensors,                  TouchLED Sensor,  V3,           noFeatRest,										noFeatRest,       T, B,   setTouchLEDHue(nDeviceIndex, nHueValue);													//Sets the output hue value of the TouchLED.
Sensors,                  TouchLED Sensor,  V3,           noFeatRest,										noFeatRest,       T, B,   setTouchLEDRGB(nDeviceIndex, red, green, blue);									//Sets the individual channel values of the TouchLED.\nChannel values range between 0-255
Sensors,                  TouchLED Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, S,   getTouchLEDBlue(nDeviceIndex); 																	//Returns the value of the Blue channel of the TouchLED (0-255).
Sensors,                  TouchLED Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, S,   getTouchLEDGreen(nDeviceIndex); 																	//Returns the value of the Green channel of the TouchLED (0-255).
Sensors,                  TouchLED Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, S,   getTouchLEDRed(nDeviceIndex); 																		//Returns the value of the Red channel of the TouchLED (0-255).

Sensors,                  Distance Sensor,  V3,           noFeatRest,        noFeatRest,       F, B,   getDistanceValue(nDeviceIndex);																	//Returns the value of the Distance sensor in millimeters (mm).\nThe value returned is based on the mode setting of the Distance sensor (Defaults to Strongest)
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, S,   getDistanceAdvanced(nDeviceIndex, pDistanceInfo); 								//Returns a structure (TDistanceInfo) containing all of the distance sensor values.
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   getDistanceMaxRange(nDeviceIndex); 															//Returns the maximum range of the Distance sensor in millimeters (mm).
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   getDistanceMinRange(nDeviceIndex); 															//Returns the minimum range of the Distance sensor in millimeters (mm).
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   getDistanceMostReflective(nDeviceIndex); 												//Returns the value of the object the Distance sensor determines to be the most reflective (typically the largest) in millimeters.
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   getDistanceSecondStrongest(nDeviceIndex);												//Returns the value of the object the Distance sensor determines to be to be the second strongest (typically the second closest) in millimeters. 
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, A,   getDistanceStrongest(nDeviceIndex);														  //Returns the value of the object the Distance sensor determines to be to be the strongest (typically the closest) in millimeters. 
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, I,   setDistanceBrightnessThreshold(nDeviceIndex, nBrightnessValue); 	//Sets the Brightness (largest/most reflective) threshold - ranges between 0-100. Defaults to a value of (35).
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, I,   setDistanceFilterFactor(nDeviceIndex, nFilterFactor); 						//Sets the Filter Factor of the distance sensor
Sensors,                  Distance Sensor,  V3,           noFeatRest,                   noFeatRest,				T, B,   setDistanceMaxRange(nDeviceIndex, nMaxDistanceInMM); 						//Returns the maximum range of the Distance sensor in millimeters (mm).\nNote setting this value too large may cause the distance sensor to return many false positives.
Sensors,                  Distance Sensor,  V3,           noFeatRest,                   noFeatRest,				T, B,   setDistanceMinRange(nDeviceIndex, nMinDistanceInMM); 						//Returns the minimum range of the Distance sensor in millimeters (mm).\nThis value is useful to have the distance sensor ignore object that are too close (like an arm).
Sensors,                  Distance Sensor,  V3,           feat_NaturalLanguageInActive, noFeatRest,       F, S,   setDistanceObjectFilterMode(nDeviceIndex, nFilterMode);					//Sets the Object Filter Mode to adjust what value is returned when using the 'getDistanceValue' command.\nAcceptable Values: strongestSignal,secondStrongestSignal,mostReflective
Sensors,                  Distance Sensor,  V3,   		    feat_NaturalLanguageInActive, noFeatRest,       F, I,   setDistanceSNRThreshold(nDeviceIndex, nSNRValue); 								//Sets the SNR Threshold (signal vs. noise) - ranges between 0-110. Defaults to a value of (19)
Sensors,                  Distance Sensor,  V3,		        feat_NaturalLanguageInActive, noFeatRest,       F, I,   setDistanceTransmitPower(nDeviceIndex, nTransmitPower); 					//Sets the Distance Sensor on or off.\nTransmitPower: 1 = on / 0 = off

Sensors,                  Gyro Sensor,      V3,        		noFeatRest,                   noFeatRest,       F, B,   getGyroDegrees(nDeviceIndex);																		//Returns the accumulated value of the Gyro Sensor in degrees.\nDirection can be determined by positive and negative values.
Sensors,                  Gyro Sensor,      V3,        		noFeatRest,                   noFeatRest,       F, B,   getGyroHeading(nDeviceIndex);																		//Returns the heading of the Gyro Sensor (0-359) based on last "reset" point.
Sensors,                  Gyro Sensor,      V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, A,   getGyroRate(nDeviceIndex);																				//Returns the rate of movement of the Gyro Sensor in degrees per second.

Sensors,                  Gyro Sensor,      V3,        		noFeatRest,                   noFeatRest,       F, B,   getGyroDegreesFloat(nDeviceIndex);															//Returns the accumulated value of the Gyro Sensor as a floating point (decimal) value. .\nDirection can be determined by positive and negative values.
Sensors,                  Gyro Sensor,      V3,        		noFeatRest,                   noFeatRest,       F, B,   getGyroHeadingFloat(nDeviceIndex);															//Returns the heading of the Gyro Sensor (0-359) based on last "reset" point as a floating point (decimal) value.
Sensors,                  Gyro Sensor,      V3,        		noFeatRest,                   noFeatRest,       F, A,   getGyroRateFloat(nDeviceIndex);																	//Returns the rate of movement of the Gyro Sensor in degrees per second as a floating point value.

Sensors,                  Gyro Sensor,      V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getGyroSensitivity(nDeviceIndex);																//Returns the current sensitivty setting of the Gyro Sensor.
Sensors,                  Gyro Sensor,      V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   setGyroSensitivity(nDeviceIndex, range);													//Sets the sensitivity of the gyro sensor.\nMore Sensitive gives better accuracy but also can lead to "missed counts" by moving too quickly.
Sensors,                  Gyro Sensor,      V3,        		noFeatRest,                   noFeatRest,				T, B,   resetGyro(nDeviceIndex);																					//Resets the Gyro Sensor to use it's current position as the "zero" point.

Sensors,                  Gyro Sensor,      V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getGyroCalibrationFlag(nDeviceIndex)															//Returns the flag indicating if calibration of the gyro is in process.
Sensors,                  Gyro Sensor,      V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   getGyroOverRangeFlag(nDeviceIndex)																//Returns the flag indiciating the gyro has rotated faster than the current rate setting. This flag latches (future version will allow you to clear the flag).
Sensors,                  Gyro Sensor,      V3,        		feat_NaturalLanguageInActive, noFeatRest,       F, S,   startGyroCalibration(nDeviceIndex, nCalibrationSetting);					//Begins the gyro calibration process for a specific gyro - the calibration setting specifies how many samples to accumulate for the calibration. The gyro should not move during calibration. 2048 samples is the recommended calibration.

// EV3 Touch Sensor Intrinsics
Sensors,                  Touch Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getTouchValue(nDeviceIndex) //
Sensors,                  Touch Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getBumpedValue(sensorPort) //
Sensors,                  Touch Sensor,     E,        		noFeatRest, noFeatRest,       					T, B,   resetBumpedValue(sensorPort) //

// EV3 Colour Sensor Intrinsics
Sensors,                  Color Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getColorRGB(nDeviceIndex, pRedChannel, pGreenChannel, pBlueChannel) //
Sensors,                  Color Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getColorName(nDeviceIndex) //
Sensors,                  Color Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getColorAmbient(nDeviceIndex) //
Sensors,                  Color Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getColorReflected(nDeviceIndex) //
Sensors,                  Color Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getColorSaturation(nDeviceIndex) //
Sensors,                  Color Sensor,     E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getColorHue(nDeviceIndex) //

// EV3 Gyro Sensor Intrinsics
Sensors,                  Gyro Sensor,     	E,        		noFeatRest, noFeatRest,      					T, B,   resetGyro(nDeviceIndex) //;
Sensors,                  Gyro Sensor,     	E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getGyroDegrees(nDeviceIndex) //
Sensors,                  Gyro Sensor,     	E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getGyroHeading(nDeviceIndex) //
Sensors,                  Gyro Sensor,     	E,        		feat_NaturalLanguageInActive, noFeatRest,       F, B,   getGyroRate(nDeviceIndex) //

// EV3 Ultrasound Sensor Intrinsics
Sensors,                  Ultrasonic Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getUSDistance(nDeviceIndex) //

// EV3 Infrared Sensor Intrinsics
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRDistance(nDeviceIndex) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRBeaconDirection(nDeviceIndex) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRGetBeaconChannelDirection(nDeviceIndex, nChannel) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRBeaconStrength(nDeviceIndex) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRGetBeaconChannelStrength(nDeviceIndex, nChannel) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRBeaconAllChannels(nDeviceIndex, pDirections, pStrengths) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRRemoteButtons(nDeviceIndex) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   getIRRemoteChannelButtons(nDeviceIndex, nChannel) //
Sensors,                  Infrared Sensor,     E,        	feat_NaturalLanguageInActive, noFeatRest,       F, B,   ev3IRRemoteGetAllChannelsButtons(nDeviceIndex, pButtonData) //


Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl1                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl10                   //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl11                   //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl12                   //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl2                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl3                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl4                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl5                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl6                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl7                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl8                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   dgtl9                    //
Sensors,                  Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getSensorRawADValue[]    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_1                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_2                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_3                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_4                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_5                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_6                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_7                    //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   I2C_8                    //
Sensors,                  Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   ifiInterruptPorts[]      //This array is used by the "sensor and motor setup" wizard to map a regular "sensor" port with an interrupt port. This is only used for the two types of sensors (sonar sensors and quadrature encoders) that are interrupt based. All the other sensors are non-interrupt based. Both of these sensors use two digital I/O pins; one of which must be a interrupt pin.\n\n\r
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in1                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in2                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in3                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in4                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in5                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in6                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in7                      //
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   in8                      //
Sensors,                  Variables,    ,          feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kLastBuiltinNxtSensor    //
Sensors,                  Variables,    NTV1,      feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kNumbOfPSJoysticks       //Constant. Number of buttons and joystick variables from Playstation 3rd party SOny PlaystationController interface.
Sensors,                  Variables,    V1V2,      feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nAnalogChannelCount      //Contains the number of analog channels on a VEX. The remaining channels will be treated as digital sensors.
Sensors,                  Variables,    R,         feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nMissedSensorAtoDConversions//Undefined Entries
Sensors,                  Variables,    V1,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nPSControl[]             //Used for optional 3rd party Sony Playstation wireless controller interface. Value of joysticks and buttons
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nPSControl[]             //Used for optional 3rd party Sony Playstation wireless controller interface. Value of joysticks and buttons
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVirtualSensorModeChanges//
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nVirtualSensorTypeChanges//
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   S1                       //
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   S2                       //
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   S3                       //
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   S4                       //
Sensors,                  Variables,    V1V2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorBias[]             //This field is used by the gyro and accelerometer sensors to calculate the "steady state" raw analog value when the sensor is not moving. When the sensor is first initialized, the ROBOTC firmware spends a few seconds continuously reading the sensor value. The average of these values is the "bias" value. This calculation allows ROBOTC to calibrate the firmware to the variations in readings that may occur with different battery levels, different temperatures and among different sensors.\n\n\rThe ROBOTC firmware will use this value in calculating future sensor readings. The instantaneous value of the sensor is the current raw analog value minus the calculated bias value.
Sensors,                  Variables,    V1V2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorSmallBias[]        //This field is used by the gyro and accelerometer sensors to calculate the remainder "steady state" raw analog value when the sensor is not moving. 
Sensors,                  Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sensorBoolean[]          //Boolean value of a sensor. Depending on sensor type, value may not make sense.
Sensors,                  Variables,    V1V2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorDeadBand[]         //This variable is used with the gyro sensor to eliminate the effect of minor noise.\n\n\rThe gyro sensor hardware provides an analog reading of instantaneous angular rate of change. The ROBOTC firmware integrates this value (i.e. keeps a cumulative sum of all the instantaneous values) to turn this into an angle. This value is then adjusted and scaled to present it into a value useful to end user (e.g. scale might be 0 to 3599 to represent 0.0 to 359.9 degrees of angle).\n\n\rThe 'SensorDeadBand' value is used to screen out very small values from the integration. Values less than the dead band are ignored and not used for the calculation.
Sensors,                  Variables,    V1V2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorFullCount[]        //This value is used on the gyro sensor to indicate the "full count' of the sensor.\n\n\rFor example, the gyro might have a scale of 00 to 3599 reprenting values of 0.0 to 359.9 degrees of angle. In this case the "sensorFullCount" value is 3600 and represent the upper range for the calculated value. The sensor value is calculated by reporting the calculated value modulo the "SensorFullCount" value.
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorMode[]             //Mode of a sensor. Raw, percentage, wrc
Sensors,                  Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorRaw[]              //Raw (un-normalized) value of a sensor. Usually this is the raw Analog value with range 0 to 1023.
Sensors,                  Variables,    V1V2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorScale[]            //This value is used on the gyro and accelerometer sensor to adjust the sensor to a scaled range.\n\n\rFor example, you might want to use a scale of 0000 to 3599 for the gyro reprenting values of 0.0 to 359.9 degrees of angle.The "SensorScale" value has been set as a divisor used on the internal calculated value to adjust to this scale. The value is made user visible so that you can adjust to fine tune for your particular sensor.
Sensors,                  Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   sensorSubType[]          //Sensor sub-type. Used for 3rd party sensors. May be obsolete.
Sensors,                  Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sensorType[]             //The type of a sensor (touch, light, sonar, etc)
Sensors,                  Variables,    ALL,       noFeatRest, noFeatRest,                     	F, B,   sensorValue[]            //Value of a sensor

Sensors I2C,              Commands,     NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   getI2CSensorData(nSensorIndex, nNumbOfBytes, nBuffer)//ROBOTC firmware automatically polls data from I2C sensor types (i.e. LEGO, HiTechnic and Mindsensors) that are known to the firmware relieving user programs from this task. The data is polled in background on a periodic basis.\n\n\rThis function is used to copy the last polled data into a buffer in a user program.
Sensors I2C,              Commands,     NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readI2CReply(nPort, replyBytes, nBytesToRead);//Retrieves the reply bytes from the previous I2C message.
Sensors I2C,              Commands,     NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readI2CReply(nPort, pReplyBytes, nBytesToRead);//Retrieves the reply bytes from the previous I2C message.
Sensors I2C,              Commands,		  V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   startI2CDeviceBytesRead(port, nRegisterIndex, nNumbOfBytes)//
Sensors I2C,              Commands,     V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   startI2CDeviceBytesWrite(port, nRegisterIndex, pToBuffer, nNumbOfBytes)//
Sensors I2C,              Commands,     V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   storeI2CDeviceBytesReadFromPortBuffer(port, pToBuffer, nNumbOfBytes);//
Sensors I2C,              Commands,    V3,        feat_NaturalLanguageInActive, noFeatRest,                     	F, S,   vexIqGetI2CStatus(port); //

Sensors I2C,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendI2CMsg(nPort, pSendMsg, nReplySize);//Send an I2C message on the specified sensor port.
Sensors I2C,              Commands,   NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendI2CMsg(nPort, sendMsg, nReplySize);//Send an I2C message on the specified sensor port.
Sensors I2C,              Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   bI2CCheckACKs            //Boolean variable to indicate whether ROBOTC firmware should check for ACK (acknowledgement) after every byte sent to a digital sensor via the I2C messaging protocol. This is the default value and should not need to be changed.\n\n\rThe standard LEGO firmware only checks for ACKs after the first byte transmitted. This field is provided for compatibility in case some sensors do not properly generate ACKs. This variable is for debugging only.
Sensors I2C,              Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nI2CBytesReady[]         //Number of queued bytes ready for access from the previous I2C read request.
Sensors I2C,              Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nI2CRetries              //The number of re-transmission attempts that should be made for I2C message.
Sensors I2C,              Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nI2CStatus[]             //Currents status of an sensor I2C link.
Sensors I2C,              Commands,   V2,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   readI2CReply(replyBytes, nBytesToRead)//Retrieves the reply bytes from the previous I2C message.
Sensors I2C,              Commands,   V2,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendI2CMsg(sendMsg, nReplySize)//Send an I2C message.
Sensors I2C,              Commands,   V2,      					feat_NaturalLanguageInActive,        noFeatRest,       F, A, getI2CErrorPegs(pPegCounts, nDataSize);
Sensors I2C,              Commands,   V2,      					feat_NaturalLanguageInActive,        noFeatRest,       F, A, getI2CStatistics(pStatistics, nDataSize);
Sensors I2C,              Commands,   V2,      					feat_NaturalLanguageInActive,        noFeatRest,       F, A, bUseVexI2CEncoderVelocity

Serial Link,              Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bXmitComplete(nPort)     //Boolean return valuje indicates whether transmission is complete on the selected serial port
Serial Link,              Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   configureSerialPort(nPort, nMode);//Sets the operational mode of the selected serial port
Serial Link,              Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getChar(nPort)           //Gets a single character from the selected serial port. 0x100 indicates no character.
Serial Link,              Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sendChar(nPort, nChar);  //Adds a single character to the transmit buffer for the selected serial port
Serial Link,              Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setBaudRate(nPort, nBaudRate);//Sets the baud rate for the selected serial port
Serial Link,              Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getUartConfig(nPort); //Returns the configuration of the selected UART port.

Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, I,   kNumbOfServos            //
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, A,   muxUpdateInterval        //Used to set the update interval in milliseconds for the NXT firmware to send servo and motor updates to the servo controller.\n\n\rThe NXT firmware is continuously updating the servo positions and motor speeds for the controller. This variable specifies how frequently the updates should be sent.\n\n\rIn general, users should not need to change this value. The default is 20 millseconds.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, A,   servoChangeRate[]        //Specifies the rate at which an individual servo value is changed. A value of zero inidcates servo will move at maximum speed.\n\n\rThe change rate is a useful variable for "smoothing" the movement of the servos and preventing jerky motion from software calculated rapd and wide changes in the servo value.\n\n\rThe default value is a change rate of 10 positions on every servo update which occurs, by default, every 20 milliseconds.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, S,   servoMaxPos[]            //Specifies the upper limit for servo movement.\n\n\rNOTE: Not yet implemented.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, S,   servoMinPos[]            //Specifies the lower limt for servo movement.\n\n\rNOTE: Not yet implemented.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, I,   servoTarget[]            //Deprecated. Used to set the position of the servos on a sensor port Servo MUX controller. Values can range from 0 to 255.\n\n\rThe firmware will automatically move the servo to this poisition over the next few update intervals.\n\n\rAn exception will occur if this variable is accessed and the servo controller is not configured.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, A,   servoType[]              //
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, B,   servoValue[]             //Used to read the current position of the servos on a sensor port Servo MUX controller. Values can range from 0 to 255.\n\n\rNOTE: The value returned in this variable is the last position that the firmware has told the servo to move to. This may not be the actual position because the servo may not have finished the movement or the mechanical design may block the servo from fully reaching this position.\n\n\rTo set the position of a servo, use the "servo" variable. The firmware will automatically move the servo to this poisition over the next few update intervals.\n\n\rA run-time exception will occur if this variable is accessed and the servo controller is not configured.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, B,   servo[]                  //Used to set the position of the servos on a sensor port Servo MUX controller. Values can range from 0 to 255.\n\n\rThe firmware will automatically move the servo to this poisition over the next few update intervals.\n\n\rAn exception will occur if this variable is accessed and the servo controller is not configured.
Servos,                   Variables,    N,         feat_NaturalLanguageInActive,      noFeatRest,       F, A,   bSystemLeaveServosEnabledOnProgramStop //Variable to control if the TETRIX Servo Controller will keep the servo motors powered when the program ends.

Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   snprintf(ppDest, nDestLength, pzFormatString)//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   snprintf(ppDest, nDestLength, sFormatString)//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   snprintf(ppDest, nDestLength, sFormatString, ...);//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   snprintf(ppDest, nDestLength, pzFormatString, ...);
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(pDest, sFmtSpec, ...)//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(ppDest, sFormatString, ...)//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(sString, sFormatString)//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(sString, sFormatString, ...);//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(sDest, pzFormatString, ...);//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sprintf(sString, sFormatString);//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sprintf(sDest, pzFormatString);//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(pzCharsString, pzFormatString, ...);//Used to parse values and parameters into a string (similiar to StringFormat).
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sprintf(pzCharsString, pzFormatString);//Used to parse values and parameters into a string (similiar to StringFormat).

Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sscanf(sSource, sFormatString;//Used to parse values and parameters out of a string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   sscanf(sSource, pzFormatString;//Used to parse values and parameters out of a string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sscanf(sSource, sFormatString, ...);//Used to parse values and parameters out of a string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   sscanf(pzSource, pzFormatString, ...);//Used to parse values and parameters out of a string.

Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strcat(pToBuffer, pFromBuffer);//Function concatenates 'pFromBuffer' onto end of 'pToBuffer'. The variables are arrays of bytes terminated with z aero character. It is user responsibility to ensure that the 'To' array is large enough to hold the result. ROBOTC is not able to do any range checking!\n\n\rIdentical to the function found in conventional C 'string.h' library.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strcat(sToString, pFromBuffer);//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strcatSingleChar(pToBuffer, cSingleChar);//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strcmp(pString1, pString2)//Function compares 'pString1' with 'pString2'. Returns negative value if less than, 0 if equal and positive value if greater than. The variables are arrays of bytes terminated with a zero char.\n\n\rIdentical to the function found in conventional C 'string.h' library.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strcpy(pToBuffer, pFromBuffer);//Function copies 'pFromBuffer' to 'pToBuffer'. The variables are arrays of bytes terminated with a zero character. It is user responsibility to ensure that the 'To' array is large enough to hold the result. ROBOTC is not able to do any range checking!\n\n\rIdentical to the function found in conventional C 'string.h' library.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strIndex(sString, nIndex)//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringAssign(sDest, nSrce);//Internal -- used by compiler code generator
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringAssign(sDest, sSrce);//Internal -- used by compiler code generator
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringAssign(sDest, pzSrce);//Internal -- used by compiler code generator
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringConcatenate(sDest, nSrce);//Internal -- used by compiler code generator
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringConcatenate(sDest, sSrce);//Internal -- used by compiler code generator
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringConcatenate(sDest, pzSrce);//Internal -- used by compiler code generator
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringDelete(sDest, nIndex, nSize);//dDletes a substring from a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFind(sSrce, sSearch);//Finds the position in a string of the selected substring
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFind(sSrce, sFindString);//Finds the position in a string of the selected substring
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFind(sSrce, pzFindString);//Finds the position in a string of the selected substring
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFormat(sDest, sFormatString, ...);//Formats a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFormat(sDest, pzFormatString, ...);//Formats a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringFormat(sDest, sFormatString);//Formats a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringFormat(sDest, pzFormatString);//Formats a string

Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFromChars(sToString, sFromChars);//Converts an array of bytes to a string value.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringFromChars(sToString, pFromChars);//Converts an array of bytes to a string value.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringGetAddress(sSrce); //
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stringGetChar(sSrce, nIndex);//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   stringSize(sString, nSize);//Obtains the size of a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strlen(sString);          //Functions returns the size of a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strlen(pString);          //Functions returns the size of a string
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strncat(pToBuffer, pFromBuffer, nMaxBufferSize);//Function concatenates 'pFromBuffer' onto end of 'pToBuffer'. The variables are arrays of bytes terminated with a zero character. nMaxBufferSize is the maximum size of ‘pFromBuffer’ and is usually created with a ‘sizeof(..)’ function call.\n\n\rIdentical to the function found in conventional C 'string.h' library file.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strncatSingleChar(pToBuffer, cSingleChar, nMaxBufferSize);//
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strncmp(pString1, pString2, nMaxBufferSize)//Function compares 'pString1' with 'pString2'. Returns negative value if less than, 0 if equal and positive value if greater than. The variables are arrays of bytes terminated with a zero char. ‘nMaxBufferSize’ is the maximum number of bytes to compare and is usually created with a ‘sizeof(..)’ function call.\n\n\rIdentical to the function found in conventional C 'string.h' library.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strncpy(pToBuffer, pFromBuffer, nMaxBufferSize);//Functions copies 'pFromBuffer' to 'pToBuffer'. The variables are arrays of bytes and not 'string' variables. 'nMaxBufferSize' is the maximum length of the result. Identical to the function found in conventional C 'string.h' library.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strTrim(pString);        //Trims leading and trailing whilespace (blanks, tab characters) from a string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strTrim(sString);        //Trims leading and trailing whilespace (blanks, tab characters) from a string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   strTrimN(pString, nMaxBufferSize);//Trims leading and trailing whilespace (blanks, tab characters) from a string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   reverseChars(sSrce);  //Reverse all of the characters in a character array or string.
Strings,                  Commands,   NTV2V3A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   reverseChars(pSrce);  //Reverse all of the characters in a character array or string.

Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   abortTimeslice();        //Stops the current task timeslice and switches execution to another task.\n\n\rTasks are given CPU execution time so that highest priority tasks get all the CPU time. If there are multiple tasks with the same highest priority then they are given "slices" of CPU time in a round robin fashion. This function will immediately end the current timeslice.
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   callSub(number);         //Internal.
Task Control,             Commands,   NTV2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   endTimeSlice();          //Ends the current task timeslice and allows another task to be rescheduled.
Task Control,             Commands,   AR,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getFileName(nFileIndex, sFileName)//
Task Control,             Commands,   AR,        feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getFileType(nFileIndex)  //
Task Control,             Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getIdleTimeProgramIndex()//
Task Control,             Commands,   V2A,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getStartupProgramIndex() //
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getTaskPriority(TaskID)  //Get the priority of the selected task
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   getTaskState(TaskID)     //
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   hogCPU();                //Commits all avaiable CPU time to the current task. No other task will run as long as this task is running (and not waiting).\n\n\rCondition is removed with a call to "releaseCPU()" or "abortTimeslice()".
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   releaseCPU();            //Cancels, if activated, the "hogCPU()" function.
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   resumeTask(TaskID);      //
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setTaskPriority(TaskID, nTaskPriority);//
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   startTask(TaskID);       //Starts or restarts execution of the specified task. 'TaskID' is the name of the task to start.
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   startTask(TaskID, nTaskPriority);//Starts or restarts execution of the specified task. 'TaskID' is the name of the task to start.
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stopAllTasks();          //Stops execution of the current program.
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   stopTask(TaskID);        //Stops execution of a single task. 'TaskID' is the name of the task to stop.
Task Control,             Commands,   ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   suspendTask(TaskID);     //Suspend execution of the selected task. Intended for internal use only.
Task Control,             Variables,    NTV2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   bClearVariablesOnPgmStart//
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kDefaultPriority         //Constant. The default priority assigned to a task.
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kDefaultTaskPriority     //Constant. The default priority assigned to a task.
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kHighPriority            //Constant. Highest priority that can be assigned to a task.
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   kLowPriority             //Constant. Lowest priority that can be assigned to a task.
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nCurrentTask             //the numerical index of the current task.
Task Control,             Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nDefaultStackSize        //Internal variable.
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nExceptionReports        //Internal variable.
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nMemoryMapAddress        //Internal variable.
Task Control,             Variables,    NTV2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nMemoryMapAddressHigh    //Internal variable.
Task Control,             Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nNxtExitClicks           //
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nOpcodesPerTimeslice     //Used to specify the size of a execution timeslice before switching to another task. User should not normally have to modify this variable.
Task Control,             Variables,    NTV1V2V3A,   feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nRemoteButton            //
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   nSchedulePriority        //The CPU scheduler priority for the current task.\n\n\rROBOTC shares CPU execution time among various tasks by giving each task a “time slice” where it will execute a group of instructions.\n\n\rEach task can be assigned a priority from 0 to 255. The NXT scheduler gives execution time to the highest priority task that is waiting to run. A round robin scheduling scheme is used when there are multiple tasks ready to run all with the highest priority. Lower priority tasks will not execute until there are no tasks of higher priority that are ready to run.\n\r
Task Control,             Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   nStackSize[]             //Internal variable.
Task Control,             Variables,    V1V2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, A,   programNumber            //
Task Control,             Variables,    NTV2A,     feat_NaturalLanguageInActive,        noFeatRest,       F, I,   pStartOfFlashFileHdr     //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQActiveProgramSlot  //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQIdleTaskCycles     //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQInitTaskCycles     //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQRawTime            //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQSchedulerSliceSize //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQUserTaskCycles     //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQSystemTime         //
Task Control,             Variables,    V3,        feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nVexIQUserTaskTime       //

Timing,                   Commands,     ALL,       noFeatRest,                          noFeatRest,       F, B,   clearTimer(theTimer);     //Resets the value of the specified timer to zero. There are four timers that you can use.
Timing,                   Commands,     ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, A,   setClockTime(hours, minutes)//Set internal clock hours and minutes. Clock value is lost when controller is powered off.
Timing,                   Commands,     ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, I,   wait10Msec(nTenMSec);    //Program execution will wait for the specified number of 10-msec ticks.\n\n\rThere are separate functios for performing 1-msec and 10-msec "waits" because some ROBOTC platforms only support 16-bit signed numbers. The maximum positive value for this is 32767 and there are cases when you may want to wait longer than this. In this case you can use the "wait10Msec" function for very long delays.
Timing,                   Commands,     ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, B,   wait1Msec(nMSec);        //Program execution will wait for the specified number of 1-milliesecond ticks.
Timing,                   Commands,     ALL,       noFeatRest,                          noFeatRest,       F, B,   sleep(nMSec);        	  //Program execution will wait/sleep for the specified number of 1-milliesecond ticks.
Timing,                   Commands,     ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, B,   delay(nMSec);        	  //Program execution will wait/sleep for the specified number of 1-milliesecond ticks.
Timing,                   Commands,     ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   noOp();        //A command used to execute no operations for the length of time of a single instruction. Used for timing purposes.
Timing,					  				Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getMicroTimer();         //Get a microsecond tick counter 
Timing,                   Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nClockMinutes            //Returns the number of minutes on the system clock
Timing,                   Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nPgmTime                 //Value of the user program elapsed timer in 1-millisecond ticks (wraps around).\n\n\rThis timer is different from the "nSysTime" variable in that it does not increment when single stepping program execution via the debugger.
Timing,                   Variables,    ALL,       feat_NaturalLanguageInActive,        noFeatRest,       F, S,   nSysTime                 //Value of the system timer in 1-millisecond ticks (wraps around)
Timing,                   Variables,    ALL,       noFeatRest,        noFeatRest,       F, I,   time100[]                //Value of the specified timer in 100-millisecond ticks (max 3276.7 seconds). There are four timers that you can use.
Timing,                   Variables,    ALL,       noFeatRest,        noFeatRest,       F, I,   time10[]                 //Value of the specified timer in 10-millisecond ticks (max 327.67 seconds). There are four timers that you can use.\n\n\rOn ROBOTC platforms that do not support 'long' variable types, the maximum value of a timer  is 32,767 ticks or 327.67 seconds. This is the largest positive value that can be stored in a 16-bit signed integer.
Timing,                   Variables,    ALL,       noFeatRest,        noFeatRest,       F, B,   time1[]                  //Value of the specified timer in 1-millisecond ticks. There are four timers that you can use.\n\n\rOn ROBOTC platforms that do not support 'long' variable types, the maximum value of a timer  is 32,767 ticks or milliseconds. This is the largest positive value that can be stored in a 16-bit signed integer. On these platforms, you can use "time10" and "time100" built-in variables to manage larger time durations.

VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuAddItem(nMenuID, pMenuText); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuGetSelection(); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuInitialize();  //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuIsCommandVisible(nMenuID, pMenuText); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuRepaint(); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuScroll(bScrollDown); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuSetProgramName(pProgramName); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuSetTitle(pTitleText); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   menuUpdateCommandText(nMenuID, pMenuText); //
VEX IQ Chooser,           Commands,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   setInitialProgramRunningScreen(); //
VEX IQ Chooser,           Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   bUserWantsExitButton //
VEX IQ Chooser,           Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   vexIQChooserState //

PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_Deadband[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_ErrorD[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_ErrorI[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_ErrorP[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_kD[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_kI[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_kP[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_Period[]
PID Control,              IME Variables,  V2,      feat_NaturalLanguageInActive, noFeatRest,                     F, S, mtrPid_StartEncoder[]

Advanced,									Variables,  V2,					 feat_NaturalLanguageInActive, noFeatRest,											 F, S, bResetFromWatchdogTimeout
Advanced,									Variables,  V2,					 feat_NaturalLanguageInActive, noFeatRest,											 F, S, nWatchdogTimeoutInterval


Sound,                    Commands,   NTEV2AR,      feat_NaturalLanguageInActive,      	noFeatRest,       F, B,   clearSounds();           //Clears all existing and buffered sound commands
Sound,                    Commands,     E,				 feat_NaturalLanguageInActive,       noFeatRest,        F, B,   StopSound();             //
Sound,                    Commands,   NTEV2AR,      feat_NaturalLanguageInActive,      	noFeatRest,       F, A,   playImmediateTone(frequency, durationIn10MsecTicks);//Immediately play tone at frequency & duration ahead of queued requests.
Sound,                    Commands,   NTEV2AR,      feat_NaturalLanguageInActive,      	noFeatRest,       F, A,   muteSound()              //Mutes all subsequent sound commands.
Sound,                    Commands,   NTEV2AR,   	  feat_NaturalLanguageInActive,      	noFeatRest,       F, A,   unmuteSound()            //Restores sound playback volume.
Sound,                    Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, B,   setSoundVolume(volumeLevel);  //Set sound volume level (0..100)
Sound,										Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getSoundVolume();             //Get sound volume level (0..100)
Sound,                    Commands,     E,				 feat_NaturalLanguageInActive,        noFeatRest,       F, A,   getSoundActive();        //

Sound,                    Sounds,   	ALL,         	feat_WO_DbgTargetVirtualWorld,	  	noFeatRest,       T, B,   playSound(sound);        //Play one of the system predefined sounds (buzz, beep, click, ...
Sound,                    Sounds,   	NTEV2AR,      feat_WO_DbgTargetVirtualWorld,	 	  noFeatRest,       T, B,   playTone(frequency, durationIn10MsecTicks);//Plays a constant tone at the specified frequency and duration
Sound,                    Sounds,			NTEV2AR,      feat_NaturalLanguageInActive,      	noFeatRest,       F, B,   playSoundFile(pFileName);//Plays a sound file from the file system. ROBOTC will automatically download required files with user program.
Sound,                    Sounds,   	V3,        		feat_WO_DbgTargetVirtualWorld,		  noFeatRest,       T, B,   playNote(nNote, nOctave, durationIn10MsecTicks); //
Sound,                    Sounds,   	V3,        		feat_NaturalLanguageInActive,      	noFeatRest,       F, B,   playRepetitiveSound(sound, durationIn10MsecTicks); //

Sound,                    Variables,    V2,        feat_NaturalLanguageInActive, noFeatRest,                    F, A,   bHasSoundDriver          //Boolean variable indicates whether a speaker is connected to the first motor port.
Sound,                    Variables,    V2,        feat_NaturalLanguageInActive, noFeatRest,                    F, S,   bIFISoundTicks           //Boolean variable indicating whether a short 'blip' sound should be played every second.
Sound,                    Variables,    NTV2V3AR,    feat_NaturalLanguageInActive, noFeatRest,                  F, A,   bPlaySounds              //Boolean flag. Indicates whether new sound requests should be accepted or discarded.
Sound,                    Variables,    NTV2V3AR,    feat_NaturalLanguageInActive, noFeatRest,                  F, A,   bSoundActive             //Boolean flag. If true indicates sound system is actively playing sound.
Sound,                    Variables,    NTV2V3AR,    feat_NaturalLanguageInActive, noFeatRest,                  F, A,   bSoundQueueAvailable     //Boolean flag. Indicates whether there is space available in the sound queue for another item.
Sound,                    Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, I,   kMaxVolumeLevel          //
Sound,                    Variables,    NT,        feat_NaturalLanguageInActive,        noFeatRest,       F, B,   nVolume                  //Sound volume. Range 0 to 4 (loudest).



Drive Train,									Commands,     NEV2V3,				 feat_NaturalLanguageInActive, noFeatRest,               F, S,   getMotorDriveTrainMoving(); //
Drive Train,									Commands,     NEV2V3,				 feat_NaturalLanguageInActive, noFeatRest,               F, S,   getMotorsWithDriveSideType(nType, nMotorList); //
Motors,										Commands,     EV3,				 	feat_NaturalLanguageInActive, noFeatRest,               F, A,   getMotorRunning(nMotorIndex); //
Motors,										Variables,    NEV2V3,				 feat_NaturalLanguageInActive, noFeatRest,               F, S,   	nMotorDriveSide[]

Sensors,									Variables,    E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   	SensorValueFloat[]

EV3 Misc,									Variables,	  E,				 feat_NaturalLanguageInActive, noFeatRest,               F, I,  	kFGColor

Sensors,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   sensorReset(sensorPort); //
Sensors,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   sensorWriteUART(sensorPort, numbOfBytes, pBytes); //
Sensors,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   setSensorConnectionType(sensorPort, connectionType); //
Sensors,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   getSensorDataset(sensorPort, pData, size); //
Sensors,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   getSensorDatasetSize(sensorPort); //
Sensors,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   setSensorAutoID(sensorPort, bEnable);//

EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   ProgramInfoGetPrgname(pgmSlotNumber, pProgramName);//
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   GetOSBuild(nMaxLength, pBuildChars);//
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   GetVersion(nMaxLength, pVersionChars);//
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   GetFWBuild(nMaxLength, pBuildChars);//
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   GetFWVersion(nMaxLength, pVersionChars);//
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   GetHWVersion(nMaxLength, pVersionChars);//
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   getBlockBackButton(); //
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   manuallySetConnectionType(sensorPort, connectionType); //
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   resetAllSensorAutoID(); //
EV3 Misc,									Commands,     E,				 feat_NaturalLanguageInActive, noFeatRest,               F, A,   shellSort(array, size); //

EV3 LED,									EV3 LED,      E,				 noFeatRest, noFeatRest,               				     T, B,   setLEDColor(LEDpatterns);//

Debugging,				  Debugging,   NEV3,       	noFeatRest,        noFeatRest,      T, B,   displaySensorValues(lineNumber, nDeviceIndex);
Debugging,				  Debugging,   NEV3,       	noFeatRest,        noFeatRest,      T, B,   displayMotorValues(lineNumber, nDeviceIndex);
Debugging,				  Debugging,   V3,       	noFeatRest,        noFeatRest,      T, B,   displayControllerValues(lineNumber, nJoystickValue);
Debugging, 			  	  Debugging,   V3,       	noFeatRest,        noFeatRest,      T, B,   displayButtonValues(lineNumber, nJoystickValue);